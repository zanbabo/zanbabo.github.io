{"total":8,"pageSize":10,"pageCount":1,"data":[{"title":"apifox","slug":"apifox","date":"2025-02-01T12:31:10.575Z","updated":"2025-02-01T12:29:35.713Z","comments":true,"path":"api/articles/apifox.json","excerpt":"","keywords":null,"cover":"https://i-blog.csdnimg.cn/direct/788fa989b0b5488896526778c1a8975f.png","content":"<h4 id=\"接口测试测什么\"><a href=\"#接口测试测什么\" class=\"headerlink\" title=\"接口测试测什么\"></a>接口测试测什么</h4><p>接口测试主要是测试系统 组件间接口的一种测试，主要用于测试服务器与前端（web浏览器，APP）之间的数据交互接口。测试的重点是要检查接口参数传递的正确性，接口功能实现的正确性，输出结果的正确性，以及对各种异常情况的容错处理的完整性和合理性。</p>\n<p>由引文对接口测试的定义可得，接口测试的对象是服务器接口，接口测试的内容包括：接口参数检验，接口功能实现是否正确，接口异常情况容错处理。</p>\n<p>接口测试的内容是《Apifox接口测试》系列教程后面的内容，本文主要讲解服务器接口，前端如何通过http协议与服务器通信，Apifox等接口测试工具如何实现接口测试。</p>\n<h4 id=\"接口测试的对象：服务器接口\"><a href=\"#接口测试的对象：服务器接口\" class=\"headerlink\" title=\"接口测试的对象：服务器接口\"></a>接口测试的对象：服务器接口</h4><p>API指的是一组预先定义好的函数，来让系统或外部的其他组件可以执行它内部实现的功能，但又无须访问源代码或者理解其内部逻辑。</p>\n<p>在需求开发过程中，前后端分离开发，两端的研发人员会共同定义好接口，编写接口文档，此后的开发过程中需要遵循这份协议文档。</p>\n<p>因此接口测试也是一种黑盒测试，测试人员需要根据接口文档来对服务器Api进行测试，来检测约定的功能是否正确实现，是否有对异常情况做容错处理。</p>\n<p>而接口文档的编写是依据前后端数据传输的协议——Http协议进行的。</p>\n<p>要会用接口文档，首先先理解http协议。</p>\n<h4 id=\"服务器接口与前端通信的方式：http协议\"><a href=\"#服务器接口与前端通信的方式：http协议\" class=\"headerlink\" title=\"服务器接口与前端通信的方式：http协议\"></a>服务器接口与前端通信的方式：http协议</h4><p>服务器和前端通过互相发送http报文完成数据交互。本小节将介绍如何创建http报文，以及如何理解报文的每一个部分，了解完就可以掌握接口测试的基础内容。</p>\n<h4 id=\"Apifox模拟前端请求mock\"><a href=\"#Apifox模拟前端请求mock\" class=\"headerlink\" title=\"Apifox模拟前端请求mock\"></a>Apifox模拟前端请求mock</h4><p>首先打开Apifox，新建一个数据模型。数据模型可以点击使用JSON格式新建，比如下面。<br><img src=\"https://i-blog.csdnimg.cn/direct/788fa989b0b5488896526778c1a8975f.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://i-blog.csdnimg.cn/direct/f9d403248ad8414487973b353d96a06c.png\" alt=\"在这里插入图片描述\"></p>\n<p>去新建一个接口，先把上面接口路径写了。然后到响应定义界面，选一下根节点数据类型，选最上面引用类型，然后选择刚刚定义的mock数据模型。<br><img src=\"https://i-blog.csdnimg.cn/direct/1c485cd6b6e34d3e9cabdd58783ce9b4.png\" alt=\"在这里插入图片描述\"></p>\n<p>接着往下滑，新建一个示例。新建完后点右上角保存这个接口，会弹出来一个框，输下接口名称就行。<br><img src=\"https://i-blog.csdnimg.cn/direct/47ccacfae89d4c23b7e99377b959bc8d.png\" alt=\"在这里插入图片描述\"></p>\n<p>保存后点mock，复制mock地址中快捷请求的路径到上面的请求框，点击发送，可以看到下面请求成功。<br><img src=\"https://i-blog.csdnimg.cn/direct/ae7b0be0c64148b4b611ba32d9691fc8.png\" alt=\"在这里插入图片描述\"></p>\n<p>到此完成模拟请求，可以去浏览器测试一下，复制上面的路径到浏览器，可以看到有成功的请求。<br><img src=\"https://i-blog.csdnimg.cn/direct/5ef97db7f5f2405ca1e12c734bca97da.png\" alt=\"在这里插入图片描述\"><br>以下是关于自主下载Apifox并注册账号后，如何生成mock接口路由和mock数据、如何测试接口、如何加入团队和设置权限的详细步骤：</p>\n<p>一、生成mock接口路由和mock数据<br>下载并安装Apifox<br>访问Apifox官方网站，下载并安装适用于您操作系统的版本。<br>注册并登录账号<br>使用微信扫码登录Apifox（新用户扫码后选择生成新账户）。<br>创建项目和接口<br>在Apifox中，创建一个新的项目。<br>点击项目详情页面中的“新建接口”按钮，输入接口路径和接口名称，并保存。<br>生成mock数据<br>在接口详情页面，切换到“Mock服务”选项卡。<br>点击“新建期望”按钮，输入期望名称和Mock数据的规则（可以使用mock.js的语法描述返回的数据）。<br>保存设置后，Apifox将自动生成mock接口路由和相应的mock数据。<br>二、测试接口<br>配置环境<br>在Apifox中，点击右上角的“环境设置”，配置您的API后端地址。<br>选择接口<br>在接口列表中选择您要测试的接口。<br>编辑请求参数<br>根据接口要求，编辑请求参数（如查询参数、请求体等）。<br>发送请求并查看响应<br>点击“发送”按钮，Apifox将向指定的后端地址发送请求，并显示响应结果。<br>您可以在响应结果中查看状态码、响应时间、响应体等内容。<br>三、加入团队和设置权限<br>加入团队<br>在Apifox中，点击左侧的“团队”选项。<br>点击“加入团队”按钮，输入团队邀请码或链接，即可加入团队。<br>设置成员权限<br>团队层级权限：团队所有者或团队管理者可以进入「我的团队」-&gt;「成员&#x2F;权限」，点击对应成员的「设置」图标，为成员设置团队层级权限。团队层级权限按角色分为团队所有者、团队管理者、团队成员、游客。<br>项目层级权限：在项目详情页面，点击“成员&#x2F;权限”选项卡，可以为团队成员设置项目层级权限。项目层级权限分为管理员、编辑者、只读成员、禁止访问四种类型。<br>使用项目邀请<br>如果您想让外部协作者编辑相关项目，但又不想让他介入团队内的其他项目，可以使用「项目邀请」功能。<br>通过「我的团队」-&gt;「成员&#x2F;权限」-&gt;「项目邀请」，发送邀请链接给外部协作者。被邀请者将只能看到和编辑被邀请的项目。<br>通过以上步骤，您可以自主下载Apifox并注册账号，然后生成mock接口路由和mock数据、测试接口、加入团队并设置权限。这些功能将帮助您更高效地进行API开发和测试。</p>\n","text":"接口测试测什么接口测试主要是测试系统 组件间接口的一种测试，主要用于测试服务器与前端（web浏览器，APP）之间的数据交互接口。测试的重点是要检查接口参数传递的正确性，接口功能实现的正确性，输出结果的正确性，以及对各种异常情况的容错处理的完整性和合理性。由引文对接口测试的定义可得","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"mission","slug":"mission","date":"2025-01-25T13:05:20.205Z","updated":"2025-01-25T13:07:08.114Z","comments":true,"path":"api/articles/mission.json","excerpt":"","keywords":null,"cover":"https://i-blog.csdnimg.cn/direct/6c6785ced5094f809ca3928bc358e25f.png","content":"<p><img src=\"https://i-blog.csdnimg.cn/direct/6c6785ced5094f809ca3928bc358e25f.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://i-blog.csdnimg.cn/direct/be3aac42f7144aec9216065120878f33.png\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-table :data=&quot;tableData&quot; stripe border style=&quot;width: 100%&quot;&gt;</span><br><span class=\"line\">       &lt;el-table-column type=&quot;index&quot; label=&quot; 序号&quot; align=&quot;center&quot; width=&quot;300&quot;/&gt;</span><br><span class=\"line\">       &lt;el-table-column prop=&quot;number&quot; label=&quot;项目编号&quot; align=&quot;center&quot;/&gt;</span><br><span class=\"line\">       &lt;el-table-column prop=&quot;name&quot; label=&quot;项目名称&quot; align=&quot;center&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       &lt;el-table-column prop=&quot;time&quot; label=&quot;创建时间&quot; align=&quot;center&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       &lt;el-table-column label=&quot;状态&quot; align=&quot;center&quot;&gt;</span><br><span class=\"line\">         &lt;template v-slot:default=&quot;scope&quot;&gt;</span><br><span class=\"line\">           &#123;&#123; scope.row &#125;&#125;</span><br><span class=\"line\">         &lt;/template&gt;</span><br><span class=\"line\">       &lt;/el-table-column&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt;</span><br><span class=\"line\">         &lt;template v-slot:default=&quot;scope&quot;&gt;</span><br><span class=\"line\">           &lt;!--编辑按钮--&gt;</span><br><span class=\"line\">           &lt;el-button</span><br><span class=\"line\">               type=&quot;primary&quot;</span><br><span class=\"line\">               text</span><br><span class=\"line\">               class=&quot;text-center&quot;</span><br><span class=\"line\">           &gt;</span><br><span class=\"line\">             编辑</span><br><span class=\"line\">           &lt;/el-button&gt;</span><br><span class=\"line\">           &lt;!-- 删除按钮--&gt;</span><br><span class=\"line\">           &lt;el-button</span><br><span class=\"line\">               type=&quot;danger&quot;</span><br><span class=\"line\">               text</span><br><span class=\"line\">               class=&quot;text-center&quot;</span><br><span class=\"line\">               @click=&quot;console.log(scope.row.id)&quot;</span><br><span class=\"line\">           &gt;</span><br><span class=\"line\">             删除</span><br><span class=\"line\">           &lt;/el-button&gt;</span><br><span class=\"line\">         &lt;/template&gt;</span><br><span class=\"line\">       &lt;/el-table-column&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     &lt;/el-table&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除方法</span><br><span class=\"line\">import &#123; ElMessageBox &#125; from &#x27;element-plus&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">async deleteclick (id) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  const confirmresult=await ElMessageBox.confirm(</span><br><span class=\"line\">      &#x27;此操作将永久删除项目,是否继续?&#x27;,</span><br><span class=\"line\">      &#x27;提示&#x27;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        confirmButtonText: &#x27;确定&#x27;,</span><br><span class=\"line\">        cancelButtonText: &#x27;取消&#x27;,</span><br><span class=\"line\">        type: &#x27;warning&#x27;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  ).catch(err=&gt;err)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  console.log(confirmresult)</span><br><span class=\"line\">  if(confirmresult.value!=&#x27;confirm&#x27;)&#123;</span><br><span class=\"line\">    return this.$message.info(&#x27;已取消删除&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //这里是实际开发的api</span><br><span class=\"line\">  const&#123;data:res&#125; await this.$http.delete(&#x27;users/&#x27;+id)</span><br><span class=\"line\">  if(res.meta.status!=200)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return this.$message.error(&#x27;删除用户失败&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.$message.success(&quot;删除用户成功&quot;)</span><br><span class=\"line\">  this.getuserList()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> dialog.vue<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;!--     对话框--&gt;</span><br><span class=\"line\">  &lt;el-dialog v-model=&quot;dialogVisible&quot; title=&quot;新增&quot; width=&quot;500&quot; &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;el-form</span><br><span class=\"line\">        ref=&quot;addFormRef&quot;</span><br><span class=\"line\">        style=&quot;max-width: 600px&quot;</span><br><span class=\"line\">        :model=&quot;addForm&quot;</span><br><span class=\"line\">        :rules=&quot;addFormRules&quot;</span><br><span class=\"line\">        label-width=&quot;auto&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        :size=&quot;formSize&quot;</span><br><span class=\"line\">        status-icon</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &lt;!--      prop是验证规则的对象数组的名称/属性--&gt;</span><br><span class=\"line\">      &lt;el-form-item v-model=&quot;dialogVisible&quot; label=&quot;项目编号&quot; prop=&quot;proname&quot;&gt;</span><br><span class=\"line\">        &lt;el-input placeholder=&quot;请输入项目编号&quot; v-model=&quot;addForm.pronumber&quot;/&gt;</span><br><span class=\"line\">      &lt;/el-form-item&gt;</span><br><span class=\"line\">      &lt;el-form-item v-model=&quot;dialogVisible&quot; label=&quot;项目名称&quot; prop=&quot;pronumber&quot;&gt;</span><br><span class=\"line\">        &lt;el-input placeholder=&quot;请输入项目名称&quot; v-model=&quot;addForm.proname&quot;/&gt;</span><br><span class=\"line\">      &lt;/el-form-item&gt;</span><br><span class=\"line\">    &lt;/el-form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;template #footer&gt;</span><br><span class=\"line\">      &lt;div class=&quot;dialog-footer&quot; &gt;</span><br><span class=\"line\">        &lt;el-button @click=&quot;dialogVisible = false&quot;  type=&quot;primary&quot; @click=&quot;saveFrom&quot;&gt;确定&lt;/el-button&gt;</span><br><span class=\"line\">        &lt;el-button @click=&quot;dialogVisible = false&quot; @click=&quot;dialogVisible=false&quot;&gt;</span><br><span class=\"line\">          取消</span><br><span class=\"line\">        &lt;/el-button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/el-dialog&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123;ref,reactive&#125;from &#x27;vue&#x27;</span><br><span class=\"line\">const dialogVisible=ref(false);</span><br><span class=\"line\">function setvisible()&#123;</span><br><span class=\"line\">  dialogVisible.value=true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">defineExpose(&#123;setvisible&#125;)</span><br><span class=\"line\">//对话框</span><br><span class=\"line\">const addForm=reactive(&#123;</span><br><span class=\"line\">  proname:&#x27;&#x27;,</span><br><span class=\"line\">  pronumber:&#x27;&#x27;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const addFormRules=&#123;</span><br><span class=\"line\">  proname:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      required:true,</span><br><span class=\"line\">      message:&#x27;请输入&#x27;,</span><br><span class=\"line\">      trigger:&#x27;blur&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      min:2,</span><br><span class=\"line\">      max:10,</span><br><span class=\"line\">      message: &#x27;项目名称在&#x27;,</span><br><span class=\"line\">      trigger:&#x27;blur&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n","text":" [Figure] ","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"elementui","slug":"elementui","date":"2025-01-21T14:33:18.480Z","updated":"2025-01-23T12:58:50.335Z","comments":true,"path":"api/articles/elementui.json","excerpt":"","keywords":null,"cover":"/zuoyee.jpg","content":"<p><img src=\"/zuoyee.jpg\"></p>\n<h1 id=\"一-页面布局el-container\"><a href=\"#一-页面布局el-container\" class=\"headerlink\" title=\"一.页面布局el-container\"></a>一.页面布局el-container</h1><h2 id=\"页面布局el-container\"><a href=\"#页面布局el-container\" class=\"headerlink\" title=\"页面布局el-container\"></a>页面布局el-container</h2><p>①. 效果图如下:<br>一般包含四个部分(<br>头:用来放置查询条件(表单)<br>主题部分：表格的显示(表格)<br>尾部(分页)<br>弹出层<br>)<br><img src=\"https://i-blog.csdnimg.cn/direct/2e6c474bbe8e473fa6b615df8c9a6a58.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"②-常用几种布局\"><a href=\"#②-常用几种布局\" class=\"headerlink\" title=\"②. 常用几种布局\"></a>②. 常用几种布局</h2><blockquote>\n<p>布局<br>(1). 头、主体、尾部、弹出层<br><img src=\"https://i-blog.csdnimg.cn/direct/5226bcc76d7a4eaa8f9e59b5f8387bee.png\" alt=\"在这里插入图片描述\"><br>2). 头、主体、尾部、弹出层、侧边栏<br><img src=\"https://i-blog.csdnimg.cn/direct/43f4cf32f68f4c268a853cf39552d781.png\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n<h1 id=\"二-表单\"><a href=\"#二-表单\" class=\"headerlink\" title=\"二. 表单\"></a>二. 表单</h1><h2 id=\"1-表单基础说明\"><a href=\"#1-表单基础说明\" class=\"headerlink\" title=\"1)表单基础说明\"></a>1)表单基础说明</h2><p>①. 数据的双向绑定：通过：model 和 v-model</p>\n<p>②. 表单中输入框离开焦点时,通过：rules 来完成校验</p>\n<p>③. 全局校验：this.r e f s [ r e f ] . v a l i d a t e ( ( v a l i d ) &#x3D; &gt; ) [ 如 果 v a l i d &#x3D; &#x3D; t r u e 表 示 校 验 成 功 ] ( t h i s . refs[ref].validate((valid)&#x3D;&gt;{ }) [如果valid&#x3D;&#x3D;true表示校验成功] ( this.refs[ref].validate((valid)&#x3D;&gt;)[如果valid&#x3D;&#x3D;true表示校验成功](this.refs.loginFromRef.validate(async valid &#x3D;&gt; {)</p>\n<p>表单数据 formData: { },&#x2F;&#x2F;表单数据<br>注意：这里的rules是在data{ } 大括号当中的</p>\n<h2 id=\"2-转成行内元素-inline-“true”\"><a href=\"#2-转成行内元素-inline-“true”\" class=\"headerlink\" title=\"2)转成行内元素(:inline&#x3D;“true”)\"></a>2)转成行内元素(:inline&#x3D;“true”)</h2><p>如果想要呈现每一个el-form-item 成行内元素,我们将设置:inline&#x3D;“true”<br>(eleme后台的el-form表单分为左右两边放数据 :inline&#x3D;“true”)</p>\n<h2 id=\"3-表单重置问题-resetFields\"><a href=\"#3-表单重置问题-resetFields\" class=\"headerlink\" title=\"3)表单重置问题(resetFields)\"></a>3)表单重置问题(resetFields)</h2><p>(对整个表单进行重置，将所有字段值重置为初始值并移除校验结果)<br>(以下三步都是必须的)</p>\n<p>①. el-form添加ref</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form ref=&quot;refname&quot;&gt;&lt;/el-form&gt;</span><br></pre></td></tr></table></figure>\n<p>②. form的每个item加prop属性（踩了好久的坑这个,需要和绑定数据的最后名称一致，prop属性添加到form-item上） 关键</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form-item prop=&quot;name&quot;&gt;</span><br><span class=\"line\">    &lt;el-input v-model=&quot;query.name&quot;&gt;&lt;/el-input&gt;</span><br><span class=\"line\">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>\n<p>element 中重置resetFields 函数 是恢复初始值 , 并非置空</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form-item&gt;</span><br><span class=\"line\">    &lt;el-button @click=&quot;resetForm(&#x27;refname&#x27;)&quot;&gt;清空&lt;/el-button&gt;</span><br><span class=\"line\">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>\n<p> 进行表单重置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   方式一:</span><br><span class=\"line\">restForm(refname) &#123;</span><br><span class=\"line\">   this.$refs[refname].resetFields()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">方式二:</span><br><span class=\"line\">resetForm(formName) &#123;</span><br><span class=\"line\">    this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">        this.$refs[formName].resetFields();</span><br><span class=\"line\">        this[formName] = &#123;&#125;;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   方式三:</span><br><span class=\"line\">   resetForm()&#123;</span><br><span class=\"line\">     // resetFields需要获取到ref中的表单对象</span><br><span class=\"line\">     this.$refs.queryFormRef.resetFields();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p> 代码演示：<br>(this.$refs[formName].resetFields( ) )<br>(this.$refs.queryFormRef.resetFields ( ) )<br>( this.$nextTick(( ) &#x3D;&gt; { this.$refs[formName].resetFields( ); }))</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form :model=&quot;ruleForm&quot; status-icon  ref=&quot;ruleForm&quot; label-width=&quot;100px&quot; class=&quot;demo-ruleForm&quot;&gt;</span><br><span class=\"line\">  &lt;el-form-item&gt;</span><br><span class=\"line\">    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;)&quot;&gt;提交&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;el-button @click=&quot;resetForm(&#x27;ruleForm&#x27;)&quot;&gt;重置&lt;/el-button&gt;</span><br><span class=\"line\">  &lt;/el-form-item&gt;</span><br><span class=\"line\">&lt;/el-form&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        ruleForm: &#123;</span><br><span class=\"line\">          pass: &#x27;&#x27;,</span><br><span class=\"line\">          checkPass: &#x27;&#x27;,</span><br><span class=\"line\">          age: &#x27;&#x27;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">     //重置按钮</span><br><span class=\"line\">      resetForm(formName) &#123;</span><br><span class=\"line\">        this.$refs[formName].resetFields();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-表格-模板代码很关键\"><a href=\"#三-表格-模板代码很关键\" class=\"headerlink\" title=\"三.表格(模板代码很关键)\"></a>三.表格(模板代码很关键)</h1><h2 id=\"表格基础说明\"><a href=\"#表格基础说明\" class=\"headerlink\" title=\"表格基础说明\"></a>表格基础说明</h2><p>①. 表格数据一般是 dataList: [ ],&#x2F;&#x2F;当前页要展示的分页列表数据</p>\n<p>②. v-loading:表格是否加载中</p>\n<p>③. :fit:列的宽度是否自动撑开,默认是true</p>\n<p>④. border：默认值是false(表格带有边框)<br>(默认情况下，Table 组件是不具有竖直方向的边框的，如果需要，可以使用border属性，它接受一个Boolean，设置为true即可启用)</p>\n<p>⑤. height：只要在el-table元素中定义了height属性，即可实现固定表头的表格，而不需要额外的代码。<br>(Table 的高度，默认为自动高度。如果 height为number类型,单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式)</p>\n<p>⑥. max-height:Table 通过设置max-height属性为 Table 指定最大高度。此时若表格所需的高度大于最大高度，则会显示一个滚动条。</p>\n<p>⑦. @selection-change&#x3D;“selectionRowsChange”:当我们选中复选框时,会触发事件,val表示这一行的值</p>\n<p>⑧. @row-click&#x3D;“handleRowChange”:当我们点击这一行时触发事件,row表示这一行的记录</p>\n","text":" [Figure] (Table 的高度，默认为自动高度。如果 height为number类型,单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式)⑥. max-heigh","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"elementui","slug":"element","date":"2025-01-21T13:00:52.000Z","updated":"2025-01-23T13:02:21.249Z","comments":true,"path":"api/articles/element.json","excerpt":"","keywords":null,"cover":"/zuoyee.png","content":"<p><img src=\"/zuoyee.png\"></p>\n<h1 id=\"一-页面布局el-container\"><a href=\"#一-页面布局el-container\" class=\"headerlink\" title=\"一.页面布局el-container\"></a>一.页面布局el-container</h1><h2 id=\"页面布局el-container\"><a href=\"#页面布局el-container\" class=\"headerlink\" title=\"页面布局el-container\"></a>页面布局el-container</h2><p>①. 效果图如下:<br>一般包含四个部分(<br>头:用来放置查询条件(表单)<br>主题部分：表格的显示(表格)<br>尾部(分页)<br>弹出层<br>)<br><img src=\"https://i-blog.csdnimg.cn/direct/2e6c474bbe8e473fa6b615df8c9a6a58.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"②-常用几种布局\"><a href=\"#②-常用几种布局\" class=\"headerlink\" title=\"②. 常用几种布局\"></a>②. 常用几种布局</h2><blockquote>\n<p>布局<br>(1). 头、主体、尾部、弹出层<br><img src=\"https://i-blog.csdnimg.cn/direct/5226bcc76d7a4eaa8f9e59b5f8387bee.png\" alt=\"在这里插入图片描述\"><br>2). 头、主体、尾部、弹出层、侧边栏<br><img src=\"https://i-blog.csdnimg.cn/direct/43f4cf32f68f4c268a853cf39552d781.png\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n<h1 id=\"二-表单\"><a href=\"#二-表单\" class=\"headerlink\" title=\"二. 表单\"></a>二. 表单</h1><h2 id=\"1-表单基础说明\"><a href=\"#1-表单基础说明\" class=\"headerlink\" title=\"1)表单基础说明\"></a>1)表单基础说明</h2><p>①. 数据的双向绑定：通过：model 和 v-model</p>\n<p>②. 表单中输入框离开焦点时,通过：rules 来完成校验</p>\n<p>③. 全局校验：this.r e f s [ r e f ] . v a l i d a t e ( ( v a l i d ) &#x3D; &gt; ) [ 如 果 v a l i d &#x3D; &#x3D; t r u e 表 示 校 验 成 功 ] ( t h i s . refs[ref].validate((valid)&#x3D;&gt;{ }) [如果valid&#x3D;&#x3D;true表示校验成功] ( this.refs[ref].validate((valid)&#x3D;&gt;)[如果valid&#x3D;&#x3D;true表示校验成功](this.refs.loginFromRef.validate(async valid &#x3D;&gt; {)</p>\n<p>表单数据 formData: { },&#x2F;&#x2F;表单数据<br>注意：这里的rules是在data{ } 大括号当中的</p>\n<h2 id=\"2-转成行内元素-inline-“true”\"><a href=\"#2-转成行内元素-inline-“true”\" class=\"headerlink\" title=\"2)转成行内元素(:inline&#x3D;“true”)\"></a>2)转成行内元素(:inline&#x3D;“true”)</h2><p>如果想要呈现每一个el-form-item 成行内元素,我们将设置:inline&#x3D;“true”<br>(eleme后台的el-form表单分为左右两边放数据 :inline&#x3D;“true”)</p>\n<h2 id=\"3-表单重置问题-resetFields\"><a href=\"#3-表单重置问题-resetFields\" class=\"headerlink\" title=\"3)表单重置问题(resetFields)\"></a>3)表单重置问题(resetFields)</h2><p>(对整个表单进行重置，将所有字段值重置为初始值并移除校验结果)<br>(以下三步都是必须的)</p>\n<p>①. el-form添加ref</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form ref=&quot;refname&quot;&gt;&lt;/el-form&gt;</span><br></pre></td></tr></table></figure>\n<p>②. form的每个item加prop属性（踩了好久的坑这个,需要和绑定数据的最后名称一致，prop属性添加到form-item上） 关键</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form-item prop=&quot;name&quot;&gt;</span><br><span class=\"line\">    &lt;el-input v-model=&quot;query.name&quot;&gt;&lt;/el-input&gt;</span><br><span class=\"line\">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>\n<p>element 中重置resetFields 函数 是恢复初始值 , 并非置空</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form-item&gt;</span><br><span class=\"line\">    &lt;el-button @click=&quot;resetForm(&#x27;refname&#x27;)&quot;&gt;清空&lt;/el-button&gt;</span><br><span class=\"line\">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>\n<p>进行表单重置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   方式一:</span><br><span class=\"line\">restForm(refname) &#123;</span><br><span class=\"line\">   this.$refs[refname].resetFields()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">方式二:</span><br><span class=\"line\">resetForm(formName) &#123;</span><br><span class=\"line\">    this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">        this.$refs[formName].resetFields();</span><br><span class=\"line\">        this[formName] = &#123;&#125;;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   方式三:</span><br><span class=\"line\">   resetForm()&#123;</span><br><span class=\"line\">     // resetFields需要获取到ref中的表单对象</span><br><span class=\"line\">     this.$refs.queryFormRef.resetFields();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>代码演示：<br>(this.$refs[formName].resetFields( ) )<br>(this.$refs.queryFormRef.resetFields ( ) )<br>( this.$nextTick(( ) &#x3D;&gt; { this.$refs[formName].resetFields( ); }))</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form :model=&quot;ruleForm&quot; status-icon  ref=&quot;ruleForm&quot; label-width=&quot;100px&quot; class=&quot;demo-ruleForm&quot;&gt;</span><br><span class=\"line\">  &lt;el-form-item&gt;</span><br><span class=\"line\">    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;)&quot;&gt;提交&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;el-button @click=&quot;resetForm(&#x27;ruleForm&#x27;)&quot;&gt;重置&lt;/el-button&gt;</span><br><span class=\"line\">  &lt;/el-form-item&gt;</span><br><span class=\"line\">&lt;/el-form&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        ruleForm: &#123;</span><br><span class=\"line\">          pass: &#x27;&#x27;,</span><br><span class=\"line\">          checkPass: &#x27;&#x27;,</span><br><span class=\"line\">          age: &#x27;&#x27;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">     //重置按钮</span><br><span class=\"line\">      resetForm(formName) &#123;</span><br><span class=\"line\">        this.$refs[formName].resetFields();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-表格-模板代码很关键\"><a href=\"#三-表格-模板代码很关键\" class=\"headerlink\" title=\"三.表格(模板代码很关键)\"></a>三.表格(模板代码很关键)</h1><h2 id=\"表格基础说明\"><a href=\"#表格基础说明\" class=\"headerlink\" title=\"表格基础说明\"></a>表格基础说明</h2><p>①. 表格数据一般是 dataList: [ ],&#x2F;&#x2F;当前页要展示的分页列表数据</p>\n<p>②. v-loading:表格是否加载中</p>\n<p>③. :fit:列的宽度是否自动撑开,默认是true</p>\n<p>④. border：默认值是false(表格带有边框)<br>(默认情况下，Table 组件是不具有竖直方向的边框的，如果需要，可以使用border属性，它接受一个Boolean，设置为true即可启用)</p>\n<p>⑤. height：只要在el-table元素中定义了height属性，即可实现固定表头的表格，而不需要额外的代码。<br>(Table 的高度，默认为自动高度。如果 height为number类型,单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式)</p>\n<p>⑥. max-height:Table 通过设置max-height属性为 Table 指定最大高度。此时若表格所需的高度大于最大高度，则会显示一个滚动条。</p>\n<p>⑦. @selection-change&#x3D;“selectionRowsChange”:当我们选中复选框时,会触发事件,val表示这一行的值</p>\n<p>⑧. @row-click&#x3D;“handleRowChange”:当我们点击这一行时触发事件,row表示这一行的记录</p>\n","text":" [Figure] (Table 的高度，默认为自动高度。如果 height为number类型,单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式)⑥. max-heigh","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"","slug":"【emmmm】","date":"2025-01-19T13:31:53.600Z","updated":"2025-01-19T13:31:02.373Z","comments":true,"path":"api/articles/【emmmm】.json","excerpt":"","keywords":null,"cover":null,"content":"<p>1.vue相比原生三件套有什么特点，体现在哪里？</p>\n<p>开发效率：</p>\n<ul>\n<li>组件化开发：Vue允许开发者将代码分成独立的组件，这些组件可以复用和独立测试。原生开发需要手动管理代码的结构和复用性，容易导致代码冗长和重复。<br>-&gt;组件间的通信、生命周期。</li>\n<li>双向数据绑定：Vue提供了双向数据绑定的功能，使得数据和视图的同步变得简单。原生开发则需要手动编写代码来实现数据和视图的更新。<br>-&gt;getter&#x2F;setter   watch  computed</li>\n<li>模板语法：Vue的模板语法简洁直观，可以直接 在HTML中嵌入JavaScript表达式。原生开发需要通过JavaScript操作DOM来更新视图，代码更为复杂。<br>-&gt;模板语法</li>\n</ul>\n<p>2、学习了vue之后，之前写的小米官网有哪些可以优化的地方</p>\n<ul>\n<li>拆分组件：将小米官网拆分为头部导航栏、产品列表、产品详情、底部信息等组件。每个组件负责特定的功能或页面部分<br>组件间通信：例如，Header组件可以接收一个搜索输入框的值作为prop</li>\n<li>响应式数据绑定<br> 使用计算属性（computed）来处理复杂的数据逻辑，避免在模板中直接编写复杂的表达式。使用侦听器（watch）来观察数据的变化，并在数据变化时执行特定的操作，如更新视图或发送API请求。</li>\n<li>状态管理<br>Vuex组件可以通过this.store.state或this.store.getters访问状态，通过this.store.commit调用mutations来修改状态</li>\n</ul>\n<p>3、使用npm创建一个属于自己的vue项目，把命令行代码附在博客上<br><strong>基于 vite 创建</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 1.创建命令</span><br><span class=\"line\">npm create vue@latest</span><br><span class=\"line\"></span><br><span class=\"line\">## 2.具体配置</span><br><span class=\"line\">## 配置项目名称</span><br><span class=\"line\">√ Project name: vue3_test</span><br><span class=\"line\">## 是否添加TypeScript支持</span><br><span class=\"line\">√ Add TypeScript?  Yes</span><br><span class=\"line\">## 是否添加JSX支持</span><br><span class=\"line\">√ Add JSX Support?  No</span><br><span class=\"line\">## 是否添加路由环境</span><br><span class=\"line\">√ Add Vue Router for Single Page Application development?  No</span><br><span class=\"line\">## 是否添加pinia环境</span><br><span class=\"line\">√ Add Pinia for state management?  No</span><br><span class=\"line\">## 是否添加单元测试</span><br><span class=\"line\">√ Add Vitest for Unit Testing?  No</span><br><span class=\"line\">## 是否添加端到端测试方案</span><br><span class=\"line\">√ Add an End-to-End Testing Solution? » No</span><br><span class=\"line\">## 是否添加ESLint语法检查</span><br><span class=\"line\">√ Add ESLint for code quality?  Yes</span><br><span class=\"line\">## 是否添加Prettiert代码格式化</span><br><span class=\"line\">√ Add Prettier for code formatting?  No</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;你好啊！&lt;/h1&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    name:&#x27;App&#x27; //组件名</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .app &#123;</span><br><span class=\"line\">    background-color: #ddd;</span><br><span class=\"line\">    box-shadow: 0 0 10px;</span><br><span class=\"line\">    border-radius: 10px;</span><br><span class=\"line\">    padding: 20px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>Vite 项目中，index.html 是项目的入口文件，在项目最外层。<br>加载index.html后，Vite 解析 <script type=\"module\" src=\"xxx\"> 指向的JavaScript。<br>Vue3**中是通过 **createApp 函数创建一个应用实例。</p>\n","text":"1.vue相比原生三件套有什么特点，体现在哪里？开发效率：组件化开发：Vue允许开发者将代码分成独立的组件，这些组件可以复用和独立测试。原生开发需要手动管理代码的结构和复用性，容易导致代码冗长和重复。<br>-&gt;组件间的通信、生命周期。双向数据绑定：Vue提供了双向数据绑定","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"vue3","slug":"vue3..","date":"2025-01-19T06:46:38.441Z","updated":"2025-01-22T02:41:50.883Z","comments":true,"path":"api/articles/vue3...json","excerpt":"","keywords":null,"cover":"https://i-blog.csdnimg.cn/direct/78edc41c3bd64d82a4863660e6b26088.png","content":"<h1 id=\"一-setup\"><a href=\"#一-setup\" class=\"headerlink\" title=\"一.setup\"></a>一.setup</h1><p>setup 函数返回的对象中的内容，可直接在模板中使用。</p>\n<p>setup中访问this是undefined,&#x3D;&gt;<strong>setup中不能用this</strong></p>\n<p>setup函数会在beforeCreate之前调用，它是“领先”所有钩子执行的。&#x3D;&gt;<strong>setup先执行</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;   &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">      &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">      &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;   &lt;/div&gt; &lt;/template&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script lang=&quot;ts&quot;&gt;   export default &#123;</span><br><span class=\"line\">      name:&#x27;Person&#x27;,   /*</span><br><span class=\"line\">       data()&#123;</span><br><span class=\"line\">       return&#123;</span><br><span class=\"line\">        a:100,</span><br><span class=\"line\">        c,this.name,</span><br><span class=\"line\">        d:900,</span><br><span class=\"line\">        age:90</span><br><span class=\"line\">   \t\t &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">       methods&#123;</span><br><span class=\"line\">         b()&#123;</span><br><span class=\"line\">       \t\t console.log(&quot;b&quot;)</span><br><span class=\"line\">    \t &#125;   \t&#125;  */</span><br><span class=\"line\">      </span><br><span class=\"line\">      setup()&#123;</span><br><span class=\"line\">        // 数据，(原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）</span><br><span class=\"line\">        let name = &#x27;张三&#x27;</span><br><span class=\"line\">        let age = 18</span><br><span class=\"line\">        let tel = &#x27;13888888888&#x27;</span><br><span class=\"line\">  </span><br><span class=\"line\">        // 方法，(原来写在methods中</span><br><span class=\"line\">        function changeName()&#123;</span><br><span class=\"line\">          name = &#x27;zhang-san&#x27; //注意：此时这么修改name页面是不变化的</span><br><span class=\"line\">          console.log(name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function changeAge()&#123;</span><br><span class=\"line\">          age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class=\"line\">          console.log(age)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function showTel()&#123;</span><br><span class=\"line\">          alert(tel)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        // 交出去了（返回一个对象，对象中的内容，模板中可以直接使用</span><br><span class=\"line\">        return &#123;name,age,tel,changeName,changeAge,showTel&#125;</span><br><span class=\"line\">      &#125;   &#125; &lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"setup-的返回值\"><a href=\"#setup-的返回值\" class=\"headerlink\" title=\"setup 的返回值\"></a>setup 的返回值</h2><p>若返回一个对象：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**<br>若返回一个函数：则可以自定义渲染内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup()&#123;</span><br><span class=\"line\">  return ()=&gt; &#x27;你好啊！&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"setup-语法糖\"><a href=\"#setup-语法糖\" class=\"headerlink\" title=\"setup 语法糖\"></a>setup 语法糖</h2><p>setup函数有一个语法糖，这个语法糖，可以让我们把setup独立出去，代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    name:&#x27;Person&#x27;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 下面的写法是setup语法糖 --&gt;</span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  console.log(this) //undefined</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 数据（注意：此时的name、age、tel都不是响应式数据）</span><br><span class=\"line\">  let name = &#x27;张三&#x27;</span><br><span class=\"line\">  let age = 18</span><br><span class=\"line\">  let tel = &#x27;13888888888&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changName()&#123;</span><br><span class=\"line\">    name = &#x27;李四&#x27;//注意：此时这么修改name页面是不变化的</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changAge()&#123;</span><br><span class=\"line\">    console.log(age)</span><br><span class=\"line\">    age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function showTel()&#123;</span><br><span class=\"line\">    alert(tel)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-reactive-ref\"><a href=\"#二-reactive-ref\" class=\"headerlink\" title=\"二.reactive&amp;&amp;ref\"></a>二.reactive&amp;&amp;ref</h1><h2 id=\"1-ref-基本类型的响应式数据\"><a href=\"#1-ref-基本类型的响应式数据\" class=\"headerlink\" title=\"1.ref [基本类型的响应式数据]\"></a>1.ref [基本类型的响应式数据]</h2><p>作用：定义响应式<strong>变量</strong>。<br><strong>语法：let xxx &#x3D; ref(初始值)。</strong><br>返回值:一个RefImpl的实例对象，简称ref对象或ref，ref对象的<code>value属性</code>是<strong>响应式</strong>的。</p>\n<ul>\n<li>注意点：<br><code>JS中操作数据需要：xxx.value，但模板中不需要.value，直接使用即可。</code><br>对于let name &#x3D; ref(‘张三’)来说，<code>name不是响应式的，name.value是响应式的。</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。</span><br><span class=\"line\">  let name = ref(&#x27;张三&#x27;)</span><br><span class=\"line\">  let age = ref(18)</span><br><span class=\"line\">  // tel就是一个普通的字符串，不是响应式的</span><br><span class=\"line\">  let tel = &#x27;13888888888&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  function changeName()&#123;</span><br><span class=\"line\">    // JS中操作ref对象时候需要.value</span><br><span class=\"line\">    name.value = &#x27;李四&#x27;</span><br><span class=\"line\">    console.log(name.value)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。</span><br><span class=\"line\">    // name = ref(&#x27;zhang-san&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeAge()&#123;</span><br><span class=\"line\">    // JS中操作ref对象时候需要.value</span><br><span class=\"line\">    age.value += 1 </span><br><span class=\"line\">    console.log(age.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function showTel()&#123;</span><br><span class=\"line\">    alert(tel)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-reactive-对象类型的响应式数据\"><a href=\"#2-reactive-对象类型的响应式数据\" class=\"headerlink\" title=\"2.reactive [对象类型的响应式数据]\"></a>2.reactive [对象类型的响应式数据]</h2><p>作用：定义一个响应式<strong>对象</strong>（<strong>基本类型不要用它，要用ref，否则报错</strong>）<br>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let 响应式对象= reactive(源对象)。</span><br></pre></td></tr></table></figure>\n<p>返回值:一个<strong>Proxy</strong>的实例对象，简称：响应式对象。<br>注意点：reactive定义的响应式数据是**“深层次”**的。(见下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据</span><br><span class=\"line\">let car = reactive(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class=\"line\">//对象数组（对象的数组）</span><br><span class=\"line\">let games = reactive([</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/////////////////////////////////////////深层次</span><br><span class=\"line\">let obj = reactive(&#123;</span><br><span class=\"line\">  a:&#123;</span><br><span class=\"line\">    b:&#123;</span><br><span class=\"line\">      c:&#123;</span><br><span class=\"line\">        d:666</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">function changeCarPrice() &#123;</span><br><span class=\"line\">  car.price += 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function changeFirstGame() &#123;</span><br><span class=\"line\">  games[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\">  obj.a.b.c.d = 999</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-ref-创建：对象类型的响应式数据\"><a href=\"#3-ref-创建：对象类型的响应式数据\" class=\"headerlink\" title=\"3.ref 创建：对象类型的响应式数据\"></a>3.ref 创建：对象类型的响应式数据</h2><ul>\n<li>其实ref接收的数据可以是：基本类型、对象类型。</li>\n<li>若ref接收的是对象类型，内部其实也是调用了reactive函数。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据</span><br><span class=\"line\">let car = ref(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class=\"line\">//对象数组（对象的数组）</span><br><span class=\"line\">let games = ref([</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class=\"line\">])</span><br><span class=\"line\">let obj = ref(&#123;</span><br><span class=\"line\">  a:&#123;</span><br><span class=\"line\">    b:&#123;</span><br><span class=\"line\">      c:&#123;</span><br><span class=\"line\">        d:666</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(car)</span><br><span class=\"line\"></span><br><span class=\"line\">function changeCarPrice() &#123;</span><br><span class=\"line\">  car.value.price += 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function changeFirstGame() &#123;</span><br><span class=\"line\">  games.value[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\">  obj.value.a.b.c.d = 999</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-【ref-对比-reactive】\"><a href=\"#4-【ref-对比-reactive】\" class=\"headerlink\" title=\"4.【ref 对比 reactive】\"></a>4.【ref 对比 reactive】</h2><p>ref用来定义：基本类型数据、对象类型数据；</p>\n<p>reactive用来定义：对象类型数据。</p>\n<ul>\n<li>使用原则<br>1.若需要一个基本类型的响应式数据，必须使用ref。<br>2.若需要一个响应式对象，层级不深，ref、reactive都可以。<br>3.若需要一个响应式对象，且层级较深，推荐使用reactive。</li>\n<li>区别<blockquote>\n<p>1.<code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。<br>2.<code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"5-toRefs-toRef\"><a href=\"#5-toRefs-toRef\" class=\"headerlink\" title=\"5.toRefs toRef\"></a>5.toRefs toRef</h2><ul>\n<li>适用场景：<strong>解构时用</strong></li>\n<li>toRefs接受reactive的响应式对象形成一个新对象，<strong>双向绑定</strong>：改这个新对象的属性，同时reactive的响应式对象也会变，故能应用到模板的各种变化里</li>\n</ul>\n<blockquote>\n<p>toRefs(响应式对象）&#x2F;&#x2F;所有的  一次性解构出来<br>toRef(响应式对象，属性）&#x2F;&#x2F;单个   一个一个</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;ref,reactive,toRefs,toRef&#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let person = reactive(&#123;name:&#x27;张三&#x27;, age:18, gender:&#x27;男&#x27;&#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">\t /*</span><br><span class=\"line\">\t let &#123;name,gender&#125; = person</span><br><span class=\"line\">\t 以上未用torefs，只是普通的解构赋值，相当于</span><br><span class=\"line\">\t \t\t\t let name=person.name</span><br><span class=\"line\">\t\t\t\t let gender=person.gender</span><br><span class=\"line\">\t name,gender只是重新定义成了普通对象</span><br><span class=\"line\">\t 下面改的是自己定义的name变量，</span><br><span class=\"line\">\t 故改name但person.name没变</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">\t</span><br><span class=\"line\">  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力</span><br><span class=\"line\">  let &#123;name,gender&#125; =  toRefs(person)</span><br><span class=\"line\">\t</span><br><span class=\"line\">  // 通过toRef将person对象中的age属性取出，且依然保持响应式的能力</span><br><span class=\"line\">  let age = toRef(person,&#x27;age&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changeName()&#123;</span><br><span class=\"line\">    name.value += &#x27;~&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeAge()&#123;</span><br><span class=\"line\">    age.value += 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeGender()&#123;</span><br><span class=\"line\">    gender.value = &#x27;女&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-computed\"><a href=\"#6-computed\" class=\"headerlink\" title=\"6. computed\"></a>6. computed</h2><p>computed计算属性有缓存<br>（方法无缓存</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class=\"line\">    名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class=\"line\">    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeFullName&quot;&gt;全名改为：li-si&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;App&quot;&gt;</span><br><span class=\"line\">  import &#123;ref,computed&#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  let firstName = ref(&#x27;zhang&#x27;)</span><br><span class=\"line\">  let lastName = ref(&#x27;san&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 计算属性——只读取，不修改</span><br><span class=\"line\">  /* let fullName = computed(()=&gt;&#123;</span><br><span class=\"line\">    return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class=\"line\">  &#125;) */</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  // 计算属性——既读取又修改</span><br><span class=\"line\">  let fullName = computed(&#123;</span><br><span class=\"line\">    // 读取</span><br><span class=\"line\">    get()&#123;</span><br><span class=\"line\">      return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 修改</span><br><span class=\"line\">    set(val)&#123;</span><br><span class=\"line\">      console.log(&#x27;有人修改了fullName&#x27;,val)</span><br><span class=\"line\">      firstName.value = val.split(&#x27;-&#x27;)[0]</span><br><span class=\"line\">      lastName.value = val.split(&#x27;-&#x27;)[1]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  function changeFullName()&#123;</span><br><span class=\"line\">    fullName.value = &#x27;li-si&#x27;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-watch\"><a href=\"#三-watch\" class=\"headerlink\" title=\"三.watch\"></a>三.watch</h1><p>作用：监视数据的变化<br>特点：Vue3中的watch只能监视以下四种数据：</p>\n<p>1.ref定义的数据。<br>2.reactive定义的数据。<br>3.函数返回一个值（getter函数）。<br>4.一个包含上述内容的数组。</p>\n<pre><code>情况一：监视【ref】定义的【基本类型】数据\nwatch的第一个参数是：被监视的数据\nwatch的第二个参数是：监视的回调\n</code></pre>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据</span><br><span class=\"line\">    &lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let sum = ref(0)</span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changeSum()&#123;</span><br><span class=\"line\">    sum.value += 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 监视，情况一：监视【ref】定义的【基本类型】数据</span><br><span class=\"line\">  //watch(谁，回调函数）///////////////////////////////////////////////////////////</span><br><span class=\"line\">  const stopWatch = watch( sum, (newValue,oldValue)=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)</span><br><span class=\"line\">    if(newValue &gt;= 10)&#123;</span><br><span class=\"line\">      stopWatch()//停止监视</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>情况二<br>监视ref定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</li>\n</ul>\n<blockquote>\n<ul>\n<li>注意：</li>\n<li>若修改的是<code>ref</code>定义的对象中的<strong>属性</strong>，<code>newValue</code> 和<code> oldValue</code> <strong>都是新值</strong>，因为它们是同一个对象。</li>\n<li>若修改整个<code>ref</code>定义的<strong>对象</strong>，<code>newValue</code> 是<strong>新值</strong>， <code>oldValue </code>是<strong>旧值</strong>，因为不是同一个对象了。</li>\n</ul>\n</blockquote>\n<pre><code>监视，情况二：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\nwatch的第一个参数是：被监视的数据\nwatch的第二个参数是：监视的回调\nwatch的第三个参数是：配置对象（deep、immediate等等.....） \n</code></pre>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let person = ref(&#123;</span><br><span class=\"line\">    name:&#x27;张三&#x27;,</span><br><span class=\"line\">    age:18</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changeName()&#123;</span><br><span class=\"line\">    person.value.name += &#x27;~&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeAge()&#123;</span><br><span class=\"line\">    person.value.age += 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changePerson()&#123;</span><br><span class=\"line\">    person.value = &#123;name:&#x27;李四&#x27;,age:90&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /* </span><br><span class=\"line\">    监视，情况二：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视</span><br><span class=\"line\">    watch的第一个参数是：被监视的数据</span><br><span class=\"line\">    watch的第二个参数是：监视的回调</span><br><span class=\"line\">    watch的第三个参数是：配置对象（deep、immediate等等.....） </span><br><span class=\"line\">  */</span><br><span class=\"line\">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class=\"line\">  &#125;,&#123;deep:true&#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>情况三<br>监视<code>reactive</code>定义的【对象类型】数据，且<strong>默认</strong>开启了深度监视,(任何变化都被监听）<br><strong>直接写数据名即可</strong></p>\n<pre><code> 情况三：监视`reactive`定义的【对象类型】数据，且**默认**开启了深度监视,(任何变化都被监听）\nwatch的第一个参数是：被监视的数据\nwatch的第二个参数是：监视的回调\n</code></pre>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;test&quot;&gt;修改obj.a.b.c&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;//////////////////////</span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let person = reactive(&#123;</span><br><span class=\"line\">    name:&#x27;张三&#x27;,</span><br><span class=\"line\">    age:18</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  let obj = reactive(&#123;</span><br><span class=\"line\">    a:&#123;</span><br><span class=\"line\">      b:&#123;</span><br><span class=\"line\">        c:666</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changeName()&#123;</span><br><span class=\"line\">    person.name += &#x27;~&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeAge()&#123;</span><br><span class=\"line\">    person.age += 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changePerson()&#123;</span><br><span class=\"line\">  \t//只是值的覆盖，对象没变</span><br><span class=\"line\">    Object.assign(person,&#123;name:&#x27;李四&#x27;,age:80&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function test()&#123;</span><br><span class=\"line\">    obj.a.b.c = 888</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的</span><br><span class=\"line\">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  watch(obj,(newValue,oldValue)=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;Obj变化了&#x27;,newValue,oldValue)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>情况四<br>监视ref或reactive定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</li>\n</ul>\n<p>1.若该属性值不是对象类型，即该属性是【<strong>基本类型</strong>】的，需要写成<strong>函数形式</strong>。<br>2.若该属性值是【<strong>对象类型</strong>】，可直接编，也可写成函数，<strong>建议写成函数</strong>。</p>\n<p>结论：监视的要是对象里的属性，那么最好写函数式，<br>注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let person = reactive(&#123;</span><br><span class=\"line\">    name:&#x27;张三&#x27;,</span><br><span class=\"line\">    age:18,</span><br><span class=\"line\">    car:&#123;</span><br><span class=\"line\">      c1:&#x27;奔驰&#x27;,</span><br><span class=\"line\">      c2:&#x27;宝马&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changeName()&#123;</span><br><span class=\"line\">    person.name += &#x27;~&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeAge()&#123;</span><br><span class=\"line\">    person.age += 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeC1()&#123;</span><br><span class=\"line\">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeC2()&#123;</span><br><span class=\"line\">    person.car.c2 = &#x27;大众&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeCar()&#123;</span><br><span class=\"line\">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式</span><br><span class=\"line\">  /*</span><br><span class=\"line\"> /////////// 即 ()=&gt; person.name</span><br><span class=\"line\">相当于  ()=&gt;&#123;return person.name&#125;</span><br><span class=\"line\">   watch(()=&gt; person.name,(newValue,oldValue)=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;person.name变化了&#x27;,newValue,oldValue)</span><br><span class=\"line\">  &#125;) */</span><br><span class=\"line\"></span><br><span class=\"line\">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数</span><br><span class=\"line\">  watch(()=&gt;person.car,(newValue,oldValue)=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class=\"line\">  &#125;,&#123;deep:true&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>情况五<br>（结合前四种情况一 一对应写数据）<br>监视上述的多个数据<br>被监视的数据用<strong>数组形式</strong>   [数据一，数据二，数据三]</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;情况五：监视上述的多个数据&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let person = reactive(&#123;</span><br><span class=\"line\">    name:&#x27;张三&#x27;,</span><br><span class=\"line\">    age:18,</span><br><span class=\"line\">    car:&#123;</span><br><span class=\"line\">      c1:&#x27;奔驰&#x27;,</span><br><span class=\"line\">      c2:&#x27;宝马&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changeName()&#123;</span><br><span class=\"line\">    person.name += &#x27;~&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeAge()&#123;</span><br><span class=\"line\">    person.age += 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeC1()&#123;</span><br><span class=\"line\">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeC2()&#123;</span><br><span class=\"line\">    person.car.c2 = &#x27;大众&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeCar()&#123;</span><br><span class=\"line\">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 监视，情况五：监视上述的多个数据</span><br><span class=\"line\">  watch([()=&gt;person.name,person.car],(newValue,oldValue)=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class=\"line\">  &#125;,&#123;deep:true&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"watchEffect\"><a href=\"#watchEffect\" class=\"headerlink\" title=\"watchEffect\"></a>watchEffect</h2><ul>\n<li><p>官网：<strong>立即运行</strong>一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p>\n</li>\n<li><p>watch对比watchEffect</p>\n</li>\n</ul>\n<blockquote>\n<p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同<br>1.<code>watch</code>：要明确指出监视的数据<br>2.<code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p>\n</blockquote>\n<ul>\n<li>示例代码：<blockquote>\n<p>注：实际开发中更关注<strong>新值</strong><br><strong>watch( [temp,height],(value)&#x3D;&gt;{<br>console.log(value)<br>} )</strong><br>watch( [temp,height],(newvalue,oldvalue)&#x3D;&gt;{<br>console.log(newvalue,oldvalue)<br>} )</p>\n</blockquote>\n</li>\n</ul>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2 id=&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changePrice&quot;&gt;水温+1&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeSum&quot;&gt;水位+10&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;ref,watch,watchEffect&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let temp = ref(0)</span><br><span class=\"line\">  let height = ref(0)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changePrice()&#123;</span><br><span class=\"line\">    temp.value += 10</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeSum()&#123;</span><br><span class=\"line\">    height.value += 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 用watch实现，需要明确的指出要监视：temp、height</span><br><span class=\"line\">  watch([temp,height],(value)=&gt;&#123;</span><br><span class=\"line\">    // 从value中获取最新的temp值、height值</span><br><span class=\"line\">    const [newTemp,newHeight] = value</span><br><span class=\"line\">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class=\"line\">    if(newTemp &gt;= 50 || newHeight &gt;= 20)&#123;</span><br><span class=\"line\">      console.log(&#x27;联系服务器&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 用watchEffect实现，不用</span><br><span class=\"line\">  const stopWtach = watchEffect(()=&gt;&#123;</span><br><span class=\"line\">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class=\"line\">    if(temp.value &gt;= 50 || height.value &gt;= 20)&#123;</span><br><span class=\"line\">      console.log(document.getElementById(&#x27;demo&#x27;)?.innerText)</span><br><span class=\"line\">      console.log(&#x27;联系服务器&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 水温达到100，或水位达到50，取消监视</span><br><span class=\"line\">    if(temp.value === 100 || height.value === 50)&#123;</span><br><span class=\"line\">      console.log(&#x27;清理了&#x27;)</span><br><span class=\"line\">      stopWtach()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"标签的-ref-属性\"><a href=\"#标签的-ref-属性\" class=\"headerlink\" title=\"标签的 ref 属性\"></a>标签的 ref 属性</h2><p>作用：用于注册模板引用。</p>\n<blockquote>\n<ul>\n<li>用在普通DOM标签上，获取的是DOM节点。</li>\n<li>用在组件标签上，获取的是组件实例对象。</li>\n</ul>\n</blockquote>\n<p>用在普通DOM标签上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h1 ref=&quot;title1&quot;&gt;尚硅谷&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2 ref=&quot;title2&quot;&gt;前端&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h3 ref=&quot;title3&quot;&gt;Vue&lt;/h3&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; ref=&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;showLog&quot;&gt;点我打印内容&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  let title1 = ref()</span><br><span class=\"line\">  let title2 = ref()</span><br><span class=\"line\">  let title3 = ref()</span><br><span class=\"line\"></span><br><span class=\"line\">  function showLog()&#123;</span><br><span class=\"line\">    // 通过id获取元素</span><br><span class=\"line\">    const t1 = document.getElementById(&#x27;title1&#x27;)</span><br><span class=\"line\">    // 打印内容</span><br><span class=\"line\">    console.log((t1 as HTMLElement).innerText)</span><br><span class=\"line\">    console.log((&lt;HTMLElement&gt;t1).innerText)</span><br><span class=\"line\">    console.log(t1?.innerText)</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t/************************************/</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    // 通过ref获取元素</span><br><span class=\"line\">    console.log(title1.value)</span><br><span class=\"line\">    console.log(title2.value)</span><br><span class=\"line\">    console.log(title3.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>用在组件标签上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 父组件App.vue --&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;Person ref=&quot;ren&quot;/&gt;</span><br><span class=\"line\">  &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class=\"line\">  import Person from &#x27;./components/Person.vue&#x27;</span><br><span class=\"line\">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  let ren = ref()</span><br><span class=\"line\"></span><br><span class=\"line\">  function test()&#123;</span><br><span class=\"line\">    console.log(ren.value.name)</span><br><span class=\"line\">    console.log(ren.value.age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;</span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;ref,defineExpose&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">\t// 数据</span><br><span class=\"line\">  let name = ref(&#x27;张三&#x27;)</span><br><span class=\"line\">  let age = ref(18)</span><br><span class=\"line\">  /****************************/</span><br><span class=\"line\">  /****************************/</span><br><span class=\"line\">  // 使用defineExpose将组件中的数据交给外部</span><br><span class=\"line\">  defineExpose(&#123;name,age&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四-【props】\"><a href=\"#四-【props】\" class=\"headerlink\" title=\"四.【props】\"></a>四.【props】</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个接口，限制每个Person对象的格式</span><br><span class=\"line\">暴露     接口      </span><br><span class=\"line\">export interface PersonInter &#123;</span><br><span class=\"line\"> id:string,</span><br><span class=\"line\"> name:string,</span><br><span class=\"line\">    age:number</span><br><span class=\"line\">    keyoukewu?：number //可有可无的number类型的变量</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">// 定义一个自定义类型Persons</span><br><span class=\"line\">export type Persons = Array&lt;PersonInter&gt;  //常规写法</span><br><span class=\"line\">export type Persons=PersonInte[]  //简洁写法（但不易理解）</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>export interface PersonInter {<br>keyoukewu<code>?</code>：number &#x2F;&#x2F;<code>可有可无</code>的<code>number类型</code>的变量<br>}</p>\n</blockquote>\n<p>App.vue中代码：</p>\n<blockquote>\n<ul>\n<li>import {<code>type</code> Persons} from ‘.&#x2F;types’</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>reactive直接传泛型</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let persons = reactive&lt;Persons&gt;([</span><br><span class=\"line\">   &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class=\"line\">    &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class=\"line\">     &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class=\"line\">   ])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;Person :list=&quot;persons&quot;/&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class=\"line\">  import Person from &#x27;./components/Person.vue&#x27;</span><br><span class=\"line\">  import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">    import &#123;type Persons&#125; from &#x27;./types&#x27;</span><br><span class=\"line\">  </span><br><span class=\"line\">  /*</span><br><span class=\"line\">\t\t\t\t相当于let persons ：Persons= reactive([</span><br><span class=\"line\">\t\t\t\t... ...</span><br><span class=\"line\">    \t\t \t])</span><br><span class=\"line\">     */</span><br><span class=\"line\">     //  这种写法更好，直接传泛型</span><br><span class=\"line\">    let persons = reactive&lt;Persons&gt;([</span><br><span class=\"line\">     &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class=\"line\">      &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class=\"line\">       &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class=\"line\">     ])</span><br><span class=\"line\">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>Person.vue中代码：</p>\n<ul>\n<li><p><strong>：</strong> 叫做vue 指令 官方提供的API ，<br>冒号： 就是<strong>求值</strong>的意思</p>\n</li>\n<li><p>defineProps不用引入，define开头的是宏函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;template&gt;</span><br><span class=\"line\">&lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\"> &lt;ul&gt;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t//////////加：可以从setup语法糖获取id</span><br><span class=\"line\">     &lt;li v-for=&quot;item in list&quot;  :key=&quot;item.id&quot;&gt;</span><br><span class=\"line\">        &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">   &lt;/template&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">//import &#123;defineProps&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import &#123;withdefaults&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import &#123;type PersonInter&#125; from &#x27;@/types&#x27;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 第一种写法：仅接收</span><br><span class=\"line\">// const props = defineProps([&#x27;list&#x27;])</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 第二种写法：接收+限制类型</span><br><span class=\"line\">// defineProps&lt;&#123;list:Persons&#125;&gt;()</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 第三种写法：接收+限制类型+指定默认值+限制必要性</span><br><span class=\"line\">let props = withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;</span><br><span class=\"line\">     list:()=&gt;[&#123;id:&#x27;asdasg01&#x27;,name:&#x27;小猪佩奇&#x27;,age:18&#125;]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">   console.log(props)</span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"五-生命周期\"><a href=\"#五-生命周期\" class=\"headerlink\" title=\"五.生命周期\"></a>五.生命周期</h1><p>概念：Vue组件实例在创建时要经历一系列的初始化步骤，在此过程中Vue会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p>\n<p>规律：</p>\n<ul>\n<li>生命周期整体分为四个阶段，分别是：创建、挂载、更新、销毁，每个阶段都有两个钩子，一前一后。</li>\n</ul>\n<p>Vue3的生命周期</p>\n<p>创建阶段：setup</p>\n<p>挂载阶段：onBeforeMount、onMounted</p>\n<p>更新阶段：onBeforeUpdate、onUpdated</p>\n<p>卸载阶段：onBeforeUnmount、onUnmounted</p>\n<ul>\n<li><p>常用的钩子：onMounted(挂载完毕)、onUpdated(更新完毕)、onBeforeUnmount(卸载之前)</p>\n</li>\n<li><p><strong>挂载顺序</strong>：<strong>先子后父，App.vue最后</strong></p>\n</li>\n<li><p>示例代码：</p>\n</li>\n</ul>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- vue3写法 --&gt;</span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123; </span><br><span class=\"line\">    ref, </span><br><span class=\"line\">    onBeforeMount, </span><br><span class=\"line\">    onMounted, </span><br><span class=\"line\">    onBeforeUpdate, </span><br><span class=\"line\">    onUpdated, </span><br><span class=\"line\">    onBeforeUnmount, </span><br><span class=\"line\">    onUnmounted </span><br><span class=\"line\">  &#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let sum = ref(0)</span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changeSum() &#123;</span><br><span class=\"line\">    sum.value += 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(&#x27;setup&#x27;)</span><br><span class=\"line\">  // 生命周期钩子</span><br><span class=\"line\">  onBeforeMount(()=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;挂载之前&#x27;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  onMounted(()=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;挂载完毕&#x27;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  onBeforeUpdate(()=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;更新之前&#x27;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  onUpdated(()=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;更新完毕&#x27;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  onBeforeUnmount(()=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;卸载之前&#x27;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  onUnmounted(()=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;卸载完毕&#x27;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><p>types&#x2F;index.ts</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个接口，用于限制person对象的具体属性</span><br><span class=\"line\">export interface PersonInter &#123;</span><br><span class=\"line\">  id:string,</span><br><span class=\"line\">  name:string,</span><br><span class=\"line\">  age:number,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 一个自定义类型</span><br><span class=\"line\">// export type Persons = Array&lt;PersonInter&gt;</span><br><span class=\"line\">export type Persons = PersonInter[]</span><br></pre></td></tr></table></figure>\n<p>App.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;Person :list=&quot;persons&quot;/&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class=\"line\">import Person from &#x27;./components/Person.vue&#x27;</span><br><span class=\"line\">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import &#123;type Persons&#125; from &#x27;./types&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">let persons = reactive&lt;Persons&gt;([</span><br><span class=\"line\"> &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class=\"line\"> &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class=\"line\"> &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class=\"line\">])</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>Person.vue<br>:key&#x3D;”p.id”</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-for=&quot;p in list&quot; :key=&quot;p.id&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;p.name&#125;&#125; -- &#123;&#123;p.age&#125;&#125;</span><br><span class=\"line\">   &lt;/li&gt;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li v-for=&quot;p in list&quot; :key=&quot;p.id&quot;&gt;</span><br><span class=\"line\">        &#123;&#123;p.name&#125;&#125; -- &#123;&#123;p.age&#125;&#125;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;withDefaults&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">  import &#123;type Persons&#125; from &#x27;@/types&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 只接收list</span><br><span class=\"line\">  // defineProps([&#x27;list&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">  // 接收list + 限制类型</span><br><span class=\"line\">  // defineProps&lt;&#123;list:Persons&#125;&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">  //  接收list + 限制类型 + 限制必要性 + 指定默认值</span><br><span class=\"line\">  withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;</span><br><span class=\"line\">    list:()=&gt; [&#123;id:&#x27;ausydgyu01&#x27;,name:&#x27;康师傅·王麻子·特仑苏&#x27;,age:19&#125;]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  // 接收list，同时将props保存起来</span><br><span class=\"line\">  /* let x = defineProps([&#x27;list&#x27;])</span><br><span class=\"line\">  console.log(x.list) */</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"hook\"><a href=\"#hook\" class=\"headerlink\" title=\"hook\"></a>hook</h2><p><strong>.ts或.js文件</strong><br>本质是一个函数，把setup函数中使用的Composition API进行了封装，复用代码, 让setup中的逻辑更清楚易懂。类似于vue2.x中的 mixin</p>\n<p>person.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;，放大10倍后：&#123;&#123; bigSum &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;add&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;img v-for=&quot;(dog,index) in dogList&quot; :src=&quot;dog&quot; :key=&quot;index&quot;&gt;</span><br><span class=\"line\">    &lt;br&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;getDog&quot;&gt;再来一只小狗&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import useSum from &#x27;@/hooks/useSum&#x27;</span><br><span class=\"line\">  import useDog from &#x27;@/hooks/useDog&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  const &#123;sum,add,bigSum&#125; = useSum()</span><br><span class=\"line\">  const &#123;dogList,getDog&#125; = useDog()</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>hook&#x2F;useDog.ts</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;reactive,onMounted&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import axios from &#x27;axios&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function ()&#123;</span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let dogList = reactive([</span><br><span class=\"line\">    &#x27;https://images.dog.ceo/breeds/pembroke/n02113023_4373.jpg&#x27;</span><br><span class=\"line\">  ])</span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  async function getDog()&#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      let result = await axios.get(&#x27;https://dog.ceo/api/breed/pembroke/images/random&#x27;)</span><br><span class=\"line\">      dogList.push(result.data.message)</span><br><span class=\"line\">    &#125; catch (error) &#123;</span><br><span class=\"line\">      alert(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 钩子</span><br><span class=\"line\">  onMounted(()=&gt;&#123;</span><br><span class=\"line\">    getDog()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 向外部提供东西</span><br><span class=\"line\">  return &#123;dogList,getDog&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hook&#x2F;useSum.ts</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; ref,onMounted,computed&#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function () &#123;</span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let sum = ref(0)</span><br><span class=\"line\">  let bigSum = computed(()=&gt;&#123;</span><br><span class=\"line\">    return sum.value * 10</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function add() &#123;</span><br><span class=\"line\">    sum.value += 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 钩子</span><br><span class=\"line\">  onMounted(()=&gt;&#123;</span><br><span class=\"line\">    add()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 给外部提供东西</span><br><span class=\"line\">  return &#123;sum,add,bigSum&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"六-路由\"><a href=\"#六-路由\" class=\"headerlink\" title=\"六.路由\"></a>六.路由</h1><h2 id=\"6-1对路由的理解\"><a href=\"#6-1对路由的理解\" class=\"headerlink\" title=\"6.1对路由的理解\"></a>6.1对路由的理解</h2><p><img src=\"https://i-blog.csdnimg.cn/direct/78edc41c3bd64d82a4863660e6b26088.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>注意点</strong>：</p>\n<blockquote>\n<p>1.路由组件通常存放在<code>pages</code>或<code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。<br>2.通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉( onunmounted )的，需要的时候再去<strong>挂载</strong>(onmounted )。</p>\n</blockquote>\n<p>router&#x2F;index.ts</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个路由器，并暴露出去</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一步：引入createRouter</span><br><span class=\"line\">import &#123;createRouter,createWebHistory&#125; from &#x27;vue-router&#x27;</span><br><span class=\"line\">// 引入一个一个可能要呈现组件</span><br><span class=\"line\">import Home from &#x27;@/pages/Home.vue&#x27;</span><br><span class=\"line\">import News from &#x27;@/pages/News.vue&#x27;</span><br><span class=\"line\">import About from &#x27;@/pages/About.vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二步：创建路由器</span><br><span class=\"line\">const router = createRouter(&#123;</span><br><span class=\"line\">  history:createWebHistory(), //路由器的工作模式</span><br><span class=\"line\">  routes:[ //一个一个的路由规则</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path:&#x27;/home&#x27;,</span><br><span class=\"line\">      component:Home</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path:&#x27;/news&#x27;,</span><br><span class=\"line\">      component:News</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path:&#x27;/about&#x27;,</span><br><span class=\"line\">      component:About</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 暴露出去router</span><br><span class=\"line\">export default router</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>引入createWebHistory<br>history:createWebHistory(), &#x2F;&#x2F;路由器的工作模式<br>暴露出去router</p>\n</blockquote>\n<p><code>main.ts</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入createApp用于创建应用</span><br><span class=\"line\">import &#123;createApp&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">// 引入App根组件</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\">// 引入路由器</span><br><span class=\"line\">import router from &#x27;./router&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个应用</span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\">// 使用路由器</span><br><span class=\"line\">app.use(router)</span><br><span class=\"line\">// 挂载整个应用到app容器中</span><br><span class=\"line\">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>\n<p>App.vue</p>\n<blockquote>\n<p>RouterLink是组件，用to不用ref</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;h2 class=&quot;title&quot;&gt;Vue路由测试&lt;/h2&gt;</span><br><span class=\"line\">    &lt;!-- 导航区 --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;navigate&quot;&gt;</span><br><span class=\"line\">      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;xiaozhupeiqi&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class=\"line\">      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;xiaozhupeiqi&quot;&gt;新闻&lt;/RouterLink&gt;</span><br><span class=\"line\">      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;xiaozhupeiqi&quot;&gt;关于&lt;/RouterLink&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;!-- 展示区 --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;main-content&quot;&gt;</span><br><span class=\"line\">      &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class=\"line\">  import &#123;RouterView,RouterLink&#125; from &#x27;vue-router&#x27;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-2基本切换小果\"><a href=\"#6-2基本切换小果\" class=\"headerlink\" title=\"6.2基本切换小果\"></a>6.2基本切换小果</h2><p>路由配置文件代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createRouter,createWebHistory&#125; from &#x27;vue-router&#x27;</span><br><span class=\"line\">import Home from &#x27;@/pages/Home.vue&#x27;</span><br><span class=\"line\">import News from &#x27;@/pages/News.vue&#x27;</span><br><span class=\"line\">import About from &#x27;@/pages/About.vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const router = createRouter(&#123;</span><br><span class=\"line\">\thistory:createWebHistory(),</span><br><span class=\"line\">\troutes:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpath:&#x27;/home&#x27;,</span><br><span class=\"line\">\t\t\tcomponent:Home</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpath:&#x27;/about&#x27;,</span><br><span class=\"line\">\t\t\tcomponent:About</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export default router</span><br></pre></td></tr></table></figure>\n<p>main.ts代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import router from &#x27;./router/index&#x27;</span><br><span class=\"line\">app.use(router)</span><br><span class=\"line\"></span><br><span class=\"line\">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>\n<p>App.vue代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;h2 class=&quot;title&quot;&gt;Vue路由测试&lt;/h2&gt;</span><br><span class=\"line\">    &lt;!-- 导航区 --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;navigate&quot;&gt;</span><br><span class=\"line\">      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class=\"line\">      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;active&quot;&gt;新闻&lt;/RouterLink&gt;</span><br><span class=\"line\">      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;active&quot;&gt;关于&lt;/RouterLink&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;!-- 展示区 --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;main-content&quot;&gt;</span><br><span class=\"line\">      &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class=\"line\">  import &#123;RouterLink,RouterView&#125; from &#x27;vue-router&#x27;  </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-3两个注意\"><a href=\"#6-3两个注意\" class=\"headerlink\" title=\"6.3两个注意\"></a>6.3两个注意</h2><p>1.路由组件通常存放在pages 或 views文件夹，一般组件通常存放在components文件夹。</p>\n<p>2.通过点击导航，视觉效果上“消失” 了的路由组件，默认是被卸载掉的，需要的时候再去挂载。</p>\n<h2 id=\"6-4路由器工作模式\"><a href=\"#6-4路由器工作模式\" class=\"headerlink\" title=\"6.4路由器工作模式\"></a>6.4路由器工作模式</h2><p>1.history模式</p>\n<blockquote>\n<p>优点：URL更加美观，不带有#，更接近传统的网站URL。<br>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有404错误。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = createRouter(&#123;</span><br><span class=\"line\">  \thistory:createWebHistory(), //history模式</span><br><span class=\"line\">  \t/******/</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.hash模式</p>\n<blockquote>\n<p>优点：兼容性更好，因为不需要服务器端处理路径。<br>缺点：URL带有#不太美观，且在SEO优化方面相对较差。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = createRouter(&#123;</span><br><span class=\"line\">  \thistory:createWebHashHistory(), //hash模式</span><br><span class=\"line\">  \t/******/</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-5-tode两种写法\"><a href=\"#6-5-tode两种写法\" class=\"headerlink\" title=\"6.5 tode两种写法\"></a>6.5 tode两种写法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 第一种：to的字符串写法 --&gt;</span><br><span class=\"line\">&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 第二种：to的对象写法 --&gt;</span><br><span class=\"line\">&lt;router-link active-class=&quot;active&quot; :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"命名路由\"><a href=\"#命名路由\" class=\"headerlink\" title=\"命名路由\"></a>命名路由</h2><p>作用：可以简化路由跳转及传参（后面就讲）。</p>\n<p>给路由规则命名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes:[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name:&#x27;zhuye&#x27;,</span><br><span class=\"line\">    path:&#x27;/home&#x27;,</span><br><span class=\"line\">    component:Home</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name:&#x27;xinwen&#x27;,</span><br><span class=\"line\">    path:&#x27;/news&#x27;,</span><br><span class=\"line\">    component:News,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name:&#x27;guanyu&#x27;,</span><br><span class=\"line\">    path:&#x27;/about&#x27;,</span><br><span class=\"line\">    component:About</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>跳转路由</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;</span><br><span class=\"line\">&lt;router-link to=&quot;/news/detail&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;</span><br><span class=\"line\">&lt;router-link :to=&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h2><p>1.编写News的子路由：Detail.vue<br>2.配置路由规则，使用children配置项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = createRouter(&#123;</span><br><span class=\"line\">  history:createWebHistory(),</span><br><span class=\"line\">\troutes:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tname:&#x27;zhuye&#x27;,</span><br><span class=\"line\">\t\t\tpath:&#x27;/home&#x27;,</span><br><span class=\"line\">\t\t\tcomponent:Home</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tname:&#x27;xinwen&#x27;,</span><br><span class=\"line\">\t\t\tpath:&#x27;/news&#x27;,</span><br><span class=\"line\">\t\t\tcomponent:News,</span><br><span class=\"line\">\t\t\tchildren:[</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tname:&#x27;xiang&#x27;,</span><br><span class=\"line\">\t\t\t\t\tpath:&#x27;detail&#x27;,</span><br><span class=\"line\">\t\t\t\t\tcomponent:Detail</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t]</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tname:&#x27;guanyu&#x27;,</span><br><span class=\"line\">\t\t\tpath:&#x27;/about&#x27;,</span><br><span class=\"line\">\t\t\tcomponent:About</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export default router</span><br></pre></td></tr></table></figure>\n<p>跳转路由（记得要加完整路径）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;/news/detail&quot;&gt;xxxx&lt;/router-link&gt;</span><br><span class=\"line\">&lt;!-- 或 --&gt;</span><br><span class=\"line\">&lt;router-link :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;xxxx&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n<p>记得去Home组件中预留一个<router-view></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;news&quot;&gt;</span><br><span class=\"line\">    &lt;nav class=&quot;news-list&quot;&gt;</span><br><span class=\"line\">      &lt;RouterLink v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot; :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;</span><br><span class=\"line\">        &#123;&#123;news.name&#125;&#125;</span><br><span class=\"line\">      &lt;/RouterLink&gt;</span><br><span class=\"line\">    &lt;/nav&gt;</span><br><span class=\"line\">    &lt;div class=&quot;news-detail&quot;&gt;</span><br><span class=\"line\">      &lt;RouterView/&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路由传参\"><a href=\"#路由传参\" class=\"headerlink\" title=\"路由传参\"></a>路由传参</h2><h3 id=\"query参数\"><a href=\"#query参数\" class=\"headerlink\" title=\"query参数\"></a>query参数</h3><p>1.传递参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;</span><br><span class=\"line\">&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;</span><br><span class=\"line\">\t跳转</span><br><span class=\"line\">&lt;/router-link&gt;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;</span><br><span class=\"line\">&lt;RouterLink </span><br><span class=\"line\">  :to=&quot;&#123;</span><br><span class=\"line\">    //name:&#x27;xiang&#x27;, //用name也可以跳转</span><br><span class=\"line\">    path:&#x27;/news/detail&#x27;,</span><br><span class=\"line\">    query:&#123;</span><br><span class=\"line\">      id:news.id,</span><br><span class=\"line\">      title:news.title,</span><br><span class=\"line\">      content:news.content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &#123;&#123;news.title&#125;&#125;</span><br><span class=\"line\">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure>\n<p>2.接收参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;useRoute&#125; from &#x27;vue-router&#x27;</span><br><span class=\"line\">const route = useRoute()</span><br><span class=\"line\">// 打印query参数</span><br><span class=\"line\">console.log(route.query)</span><br></pre></td></tr></table></figure>\n<h3 id=\"params参数\"><a href=\"#params参数\" class=\"headerlink\" title=\"params参数\"></a>params参数</h3><p>1.传递参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;</span><br><span class=\"line\">&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;</span><br><span class=\"line\">&lt;RouterLink </span><br><span class=\"line\">  :to=&quot;&#123;</span><br><span class=\"line\">    name:&#x27;xiang&#x27;, //用name跳转</span><br><span class=\"line\">    params:&#123;</span><br><span class=\"line\">      id:news.id,</span><br><span class=\"line\">      title:news.title,</span><br><span class=\"line\">      content:news.title</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &#123;&#123;news.title&#125;&#125;</span><br><span class=\"line\">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure>\n<p>2.接收参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;useRoute&#125; from &#x27;vue-router&#x27;</span><br><span class=\"line\">const route = useRoute()</span><br><span class=\"line\">// 打印params参数</span><br><span class=\"line\">console.log(route.params)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意点：<br>1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。<br>2：传递<code>params</code>参数时，需要提前在规则中占位。</p>\n</blockquote>\n<h2 id=\"路由的props配置\"><a href=\"#路由的props配置\" class=\"headerlink\" title=\"路由的props配置\"></a>路由的props配置</h2><p>作用：让路由组件更方便的收到参数（可以将路由参数作为props传给组件）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname:&#x27;xiang&#x27;,</span><br><span class=\"line\">\tpath:&#x27;detail/:id/:title/:content&#x27;,</span><br><span class=\"line\">\tcomponent:Detail,</span><br><span class=\"line\"></span><br><span class=\"line\">  // props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span><br><span class=\"line\">  // props:&#123;a:1,b:2,c:3&#125;, </span><br><span class=\"line\"></span><br><span class=\"line\">  // props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span><br><span class=\"line\">  // props:true</span><br><span class=\"line\">  </span><br><span class=\"line\">  // props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span><br><span class=\"line\">  props(route)&#123;</span><br><span class=\"line\">    return route.query</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"replace属性\"><a href=\"#replace属性\" class=\"headerlink\" title=\"replace属性\"></a>replace属性</h2><ol>\n<li>作用：控制路由跳转时操作浏览器历史记录的模式。</li>\n</ol>\n<p>2.浏览器的历史记录有两种写入方式：分别为push和replace：</p>\n<blockquote>\n<p>push是追加历史记录（默认值）。<br>replace是替换当前记录。</p>\n</blockquote>\n<p>3.开启replace模式：<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;RouterLink replace .......&gt;News&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;useRoute,useRouter&#125; from &#x27;vue-router&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const route = useRoute()</span><br><span class=\"line\">const router = useRouter()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(route.query)</span><br><span class=\"line\">console.log(route.parmas)</span><br><span class=\"line\">console.log(router.push)</span><br><span class=\"line\">console.log(router.replace)</span><br></pre></td></tr></table></figure>\n<p>重定向<br>作用：将特定的路径，重新定向到已有路由。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path:&#x27;/&#x27;,</span><br><span class=\"line\">    redirect:&#x27;/about&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"七-pinia\"><a href=\"#七-pinia\" class=\"headerlink\" title=\"七.pinia\"></a>七.pinia</h1><h2 id=\"7-1准备一个效果\"><a href=\"#7-1准备一个效果\" class=\"headerlink\" title=\"7.1准备一个效果\"></a>7.1准备一个效果</h2><h2 id=\"7-2搭建-pinia-环境\"><a href=\"#7-2搭建-pinia-环境\" class=\"headerlink\" title=\"7.2搭建 pinia 环境\"></a>7.2搭建 pinia 环境</h2><p>第一步：npm install pinia</p>\n<p>第二步：操作src&#x2F;main.ts<br>app完后pinia</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createApp&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\">// 第一步：引入pinia</span><br><span class=\"line\">import &#123;createPinia&#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\">// 第二步：创建pinia</span><br><span class=\"line\">const pinia = createPinia()</span><br><span class=\"line\">// 第三步：安装pinia</span><br><span class=\"line\">app.use(pinia)</span><br><span class=\"line\">app.mount(&#x27;#app&#x27;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-3-存储-读取数据\"><a href=\"#7-3-存储-读取数据\" class=\"headerlink\" title=\"7.3 存储+读取数据\"></a>7.3 存储+读取数据</h2><p>Store是一个保存：状态、业务逻辑 的实体，每个组件都可以读取、写入它。</p>\n<p>它有三个概念：state、getter、action，相当于组件中的： data、 computed 和 methods。</p>\n<p>具体编码：src&#x2F;store&#x2F;count.ts</p>\n<blockquote>\n<p>官方建议用<strong>hook命名</strong>方式<code>useCountStore</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;defineStore&#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//   分别暴露  向外界提供</span><br><span class=\"line\">///////////////////////////defineStore（相当于id值，配置对象必须写成函数并return)</span><br><span class=\"line\">export const useCountStore = defineStore(&#x27;count&#x27;,&#123;</span><br><span class=\"line\">  //state 真正存储数据的地方</span><br><span class=\"line\">  state()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      sum:6</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-4修改数据\"><a href=\"#7-4修改数据\" class=\"headerlink\" title=\"7.4修改数据\"></a>7.4修改数据</h2><p>1.直接修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">countStore.sum = 666</span><br></pre></td></tr></table></figure>\n<p>2.批量修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">countStore.$patch(&#123;</span><br><span class=\"line\">  sum:999,</span><br><span class=\"line\">  school:&#x27;atguigu&#x27;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>3.借助action修改（action中可以编写一些业务逻辑）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export const useCountStore = defineStore(&#x27;count&#x27;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    //加</span><br><span class=\"line\">    increment(value:number) &#123;</span><br><span class=\"line\">      if (this.sum &lt; 10) &#123;</span><br><span class=\"line\">        //操作countStore中的sum</span><br><span class=\"line\">        this.sum += value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //减</span><br><span class=\"line\">    decrement(value:number)&#123;</span><br><span class=\"line\">      if(this.sum &gt; 1)&#123;</span><br><span class=\"line\">        this.sum -= value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>4.组件中调用action</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用countStore</span><br><span class=\"line\">const countStore = useCountStore()</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用对应action</span><br><span class=\"line\">countStore.incrementOdd(n.value)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-storeToRefs\"><a href=\"#5-storeToRefs\" class=\"headerlink\" title=\"5.storeToRefs\"></a>5.storeToRefs</h2><ul>\n<li>借助storeToRefs将store中的数据转为ref对象，方便在模板中使用。</li>\n<li>注意：pinia提供的storeToRefs只会将数据做转换，而Vue的toRefs会转换store中数据。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;count&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class=\"line\">  import &#123; useCountStore &#125; from &#x27;@/store/count&#x27;</span><br><span class=\"line\">  /* 引入storeToRefs */</span><br><span class=\"line\">  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 得到countStore */</span><br><span class=\"line\">  const countStore = useCountStore()</span><br><span class=\"line\">  /* 使用storeToRefs转换countStore，随后解构 */</span><br><span class=\"line\">  const &#123;sum&#125; = storeToRefs(countStore)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-getters\"><a href=\"#6-getters\" class=\"headerlink\" title=\"6.getters\"></a>6.getters</h2><p>概念：当state中的数据，需要经过处理后再使用时，可以使用getters配置。</p>\n<p>追加getters配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入defineStore用于创建store</span><br><span class=\"line\">import &#123;defineStore&#125; from &#x27;pinia&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义并暴露一个store</span><br><span class=\"line\">export const useCountStore = defineStore(&#x27;count&#x27;,&#123;</span><br><span class=\"line\">  // 动作</span><br><span class=\"line\">  actions:&#123;</span><br><span class=\"line\">    /************/</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 状态</span><br><span class=\"line\">  state()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      sum:1,</span><br><span class=\"line\">      school:&#x27;atguigu&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 计算</span><br><span class=\"line\">  getters:&#123;</span><br><span class=\"line\">    bigSum:(state):number =&gt; state.sum *10,</span><br><span class=\"line\">    upperSchool():string&#123;</span><br><span class=\"line\">      return this. school.toUpperCase()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>组件中读取数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;increment,decrement&#125; = countStore</span><br><span class=\"line\">let &#123;sum,school,bigSum,upperSchool&#125; = storeToRefs(countStore)</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-subscribe\"><a href=\"#7-subscribe\" class=\"headerlink\" title=\"7.$subscribe\"></a>7.$subscribe</h2><p>通过 store 的 $subscribe() 方法侦听 state 及其变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">talkStore.$subscribe((mutate,state)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;LoveTalk&#x27;,mutate,state)</span><br><span class=\"line\">  localStorage.setItem(&#x27;talk&#x27;,JSON.stringify(talkList.value))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>store组合式写法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;defineStore&#125; from &#x27;pinia&#x27;</span><br><span class=\"line\">import axios from &#x27;axios&#x27;</span><br><span class=\"line\">import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br><span class=\"line\">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export const useTalkStore = defineStore(&#x27;talk&#x27;,()=&gt;&#123;</span><br><span class=\"line\">  // talkList就是state</span><br><span class=\"line\">  const talkList = reactive(</span><br><span class=\"line\">    JSON.parse(localStorage.getItem(&#x27;talkList&#x27;) as string) || []</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  // getATalk函数相当于action</span><br><span class=\"line\">  async function getATalk()&#123;</span><br><span class=\"line\">    // 发请求，下面这行的写法是：连续解构赋值+重命名</span><br><span class=\"line\">    let &#123;data:&#123;content:title&#125;&#125; = await axios.get(&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;)</span><br><span class=\"line\">    // 把请求回来的字符串，包装成一个对象</span><br><span class=\"line\">    let obj = &#123;id:nanoid(),title&#125;</span><br><span class=\"line\">    // 放到数组中</span><br><span class=\"line\">    talkList.unshift(obj)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &#123;talkList,getATalk&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"八-组件通信\"><a href=\"#八-组件通信\" class=\"headerlink\" title=\"八.组件通信\"></a>八.组件通信</h1><h2 id=\"8-1props\"><a href=\"#8-1props\" class=\"headerlink\" title=\"8.1props\"></a>8.1props</h2><p>props是使用频率最高的一种通信方式，常用与 ：父 ↔ 子。</p>\n<ul>\n<li>若 父传子：属性值是非函数。</li>\n<li>若 子传父：属性值是函数。<br>父组件：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;father&quot;&gt;</span><br><span class=\"line\">    &lt;h3&gt;父组件，&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;Child :car=&quot;car&quot; :getToy=&quot;getToy&quot;/&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class=\"line\">\timport Child from &#x27;./Child.vue&#x27;</span><br><span class=\"line\">\timport &#123; ref &#125; from &quot;vue&quot;;</span><br><span class=\"line\">\t// 数据</span><br><span class=\"line\">\tconst car = ref(&#x27;奔驰&#x27;)</span><br><span class=\"line\">\tconst toy = ref()</span><br><span class=\"line\">\t// 方法</span><br><span class=\"line\">\tfunction getToy(value:string)&#123;</span><br><span class=\"line\">\t\ttoy.value = value</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;</span><br><span class=\"line\">    &lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;button @click=&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class=\"line\">\timport &#123; ref &#125; from &quot;vue&quot;;</span><br><span class=\"line\">\tconst toy = ref(&#x27;奥特曼&#x27;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdefineProps([&#x27;car&#x27;,&#x27;getToy&#x27;])</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-自定义事件\"><a href=\"#8-2-自定义事件\" class=\"headerlink\" title=\"8.2 自定义事件\"></a>8.2 自定义事件</h2><p>自定义事件常用于：子 &#x3D;&gt; 父。</p>\n<ul>\n<li>注意区分好：原生事件、自定义事件。</li>\n<li>原生事件：<br>1.事件名是特定的（click、mosueenter等等）<br>2.事件对象$event: 是包含事件相关信息的对象（pageX、pageY、target、keyCode）</li>\n<li>自定义事件：<br>1.事件名是任意名称<br>2.事件对象$event: 是调用emit时所提供的数据，可以是任意类型</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--在父组件中，给子组件绑定自定义事件：--&gt;</span><br><span class=\"line\">&lt;Child @send-toy=&quot;toy = $event&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--注意区分原生事件与自定义事件中的$event--&gt;</span><br><span class=\"line\">&lt;button @click=&quot;toy = $event&quot;&gt;测试&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//子组件中，触发事件：</span><br><span class=\"line\">this.$emit(&#x27;send-toy&#x27;, 具体数据)</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-3-mitt\"><a href=\"#8-3-mitt\" class=\"headerlink\" title=\"8.3 mitt\"></a>8.3 mitt</h2><p>与消息订阅与发布（pubsub）功能类似，可以实现任意组件间通信。</p>\n<p>安装mitt<br>新建文件：src\\utils\\emitter.ts<br>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import emitter from &quot;@/utils/emitter&quot;;</span><br><span class=\"line\">import &#123; onUnmounted &#125; from &quot;vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 绑定事件</span><br><span class=\"line\">emitter.on(&#x27;send-toy&#x27;,(value)=&gt;&#123;</span><br><span class=\"line\">  console.log(&#x27;send-toy事件被触发&#x27;,value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">onUnmounted(()=&gt;&#123;</span><br><span class=\"line\">  // 解绑事件</span><br><span class=\"line\">  emitter.off(&#x27;send-toy&#x27;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>提供数据的组件，在合适的时候触发事件<br>总线依赖着这个内置关系</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import emitter from &quot;@/utils/emitter&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">function sendToy()&#123;</span><br><span class=\"line\">  // 触发事件</span><br><span class=\"line\">  emitter.emit(&#x27;send-toy&#x27;,toy.value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-4v-model\"><a href=\"#8-4v-model\" class=\"headerlink\" title=\"8.4v-model\"></a>8.4v-model</h2><p>1.实现 父↔子 之间相互通信。<br>2.v-model的本质</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 使用v-model指令 --&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- v-model的本质是下面这行代码 --&gt;</span><br><span class=\"line\">&lt;input </span><br><span class=\"line\">  type=&quot;text&quot; </span><br><span class=\"line\">  :value=&quot;userName&quot; </span><br><span class=\"line\">  @input=&quot;userName =(&lt;HTMLInputElement&gt;$event.target).value&quot;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<p>3.组件标签上的v-model的本质：:moldeValue ＋ update:modelValue事件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 组件标签上使用v-model指令 --&gt;</span><br><span class=\"line\">&lt;AtguiguInput v-model=&quot;userName&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 组件标签上v-model的本质 --&gt;</span><br><span class=\"line\">&lt;AtguiguInput :modelValue=&quot;userName&quot; @update:model-value=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>AtguiguInput组件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;</span><br><span class=\"line\">\t\t&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;</span><br><span class=\"line\">    &lt;input </span><br><span class=\"line\">       type=&quot;text&quot; </span><br><span class=\"line\">       :value=&quot;modelValue&quot; </span><br><span class=\"line\">       @input=&quot;emit(&#x27;update:model-value&#x27;,$event.target.value)&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class=\"line\">  // 接收props</span><br><span class=\"line\">  defineProps([&#x27;modelValue&#x27;])</span><br><span class=\"line\">  // 声明事件</span><br><span class=\"line\">  const emit = defineEmits([&#x27;update:model-value&#x27;])</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>4.也可以更换value，例如改成abc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 也可以更换value，例如改成abc--&gt;</span><br><span class=\"line\">&lt;AtguiguInput v-model:abc=&quot;userName&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 上面代码的本质如下 --&gt;</span><br><span class=\"line\">&lt;AtguiguInput :abc=&quot;userName&quot; @update:abc=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>AtguiguInput组件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    &lt;input </span><br><span class=\"line\">       type=&quot;text&quot; </span><br><span class=\"line\">       :value=&quot;abc&quot; </span><br><span class=\"line\">       @input=&quot;emit(&#x27;update:abc&#x27;,$event.target.value)&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class=\"line\">  // 接收props</span><br><span class=\"line\">  defineProps([&#x27;abc&#x27;])</span><br><span class=\"line\">  // 声明事件</span><br><span class=\"line\">  const emit = defineEmits([&#x27;update:abc&#x27;])</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>5.如果value可以更换，那么就可以在组件标签上多次使用v-model</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;AtguiguInput v-model:abc=&quot;userName&quot; v-model:xyz=&quot;password&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-5-attrs\"><a href=\"#8-5-attrs\" class=\"headerlink\" title=\"8.5 $attrs\"></a>8.5 $attrs</h2><p>1.$attrs用于实现当前组件的父组件，向当前组件的子组件通信（祖→孙）。</p>\n<p>2.具体说明：$attrs是一个对象，包含所有父组件传入的标签属性。</p>\n<blockquote>\n<p>注意：$attrs会自动排除props中声明的属性(可以认为声明过的 props 被子组件自己“消费”了)<br>父组件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;father&quot;&gt;</span><br><span class=\"line\">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;Child :a=&quot;a&quot; :b=&quot;b&quot; :c=&quot;c&quot; :d=&quot;d&quot; v-bind=&quot;&#123;x:100,y:200&#125;&quot; :updateA=&quot;updateA&quot;/&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class=\"line\">\timport Child from &#x27;./Child.vue&#x27;</span><br><span class=\"line\">\timport &#123; ref &#125; from &quot;vue&quot;;</span><br><span class=\"line\">\tlet a = ref(1)</span><br><span class=\"line\">\tlet b = ref(2)</span><br><span class=\"line\">\tlet c = ref(3)</span><br><span class=\"line\">\tlet d = ref(4)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction updateA(value)&#123;</span><br><span class=\"line\">\t\ta.value = value</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;child&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;GrandChild v-bind=&quot;$attrs&quot;/&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class=\"line\">\timport GrandChild from &#x27;./GrandChild.vue&#x27;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>孙组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;grand-child&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h3&gt;孙组件&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;button @click=&quot;updateA(666)&quot;&gt;点我更新A&lt;/button&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class=\"line\">\tdefineProps([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;updateA&#x27;])</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-6-refs-parent\"><a href=\"#8-6-refs-parent\" class=\"headerlink\" title=\"8.6 refs parent\"></a>8.6 refs parent</h2><p>1.$refs用于 ：父→子。<br>值为对象，包含所有被ref属性标识的DOM元素或组件实例。<br>$parent用于：子→父。<br>值为对象，当前组件的父组件实例对象。</p>\n<h2 id=\"8-7-provide、inject\"><a href=\"#8-7-provide、inject\" class=\"headerlink\" title=\"8.7 provide、inject\"></a>8.7 provide、inject</h2><p>1.实现祖孙组件直接通信</p>\n<p>2.在祖先组件中通过provide配置向后代组件提供数据<br>在后代组件中通过inject配置来声明接收数据<br>3.步骤<br>1）父组件中，使用provide提供数据</p>\n<blockquote>\n<p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;father&quot;&gt;</span><br><span class=\"line\">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class=\"line\">    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;money += 1&quot;&gt;资产+1&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;car.price += 1&quot;&gt;汽车价格+1&lt;/button&gt;</span><br><span class=\"line\">    &lt;Child/&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class=\"line\">  import Child from &#x27;./Child.vue&#x27;</span><br><span class=\"line\">  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;</span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let money = ref(100)</span><br><span class=\"line\">  let car = reactive(&#123;</span><br><span class=\"line\">    brand:&#x27;奔驰&#x27;,</span><br><span class=\"line\">    price:100</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 用于更新money的方法</span><br><span class=\"line\">  function updateMoney(value:number)&#123;</span><br><span class=\"line\">    money.value += value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 提供数据</span><br><span class=\"line\">  provide(&#x27;moneyContext&#x27;,&#123;money,updateMoney&#125;)</span><br><span class=\"line\">  provide(&#x27;car&#x27;,car)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2)孙组件中使用inject配置项接受数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;grand-child&quot;&gt;</span><br><span class=\"line\">    &lt;h3&gt;我是孙组件&lt;/h3&gt;</span><br><span class=\"line\">    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;updateMoney(6)&quot;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class=\"line\">  import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">  // 注入数据</span><br><span class=\"line\"> let &#123;money,updateMoney&#125; = inject(&#x27;moneyContext&#x27;,&#123;money:0,updateMoney:(x:number)=&gt;&#123;&#125;&#125;)</span><br><span class=\"line\">  let car = inject(&#x27;car&#x27;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-8-slot\"><a href=\"#8-8-slot\" class=\"headerlink\" title=\"8.8 slot\"></a>8.8 slot</h2><p>父组件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\">&lt;/Category&gt;</span><br></pre></td></tr></table></figure>\n<p>子组件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;</span><br><span class=\"line\">    &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">    &lt;!-- 默认插槽 --&gt;</span><br><span class=\"line\">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-具名插槽\"><a href=\"#2-具名插槽\" class=\"headerlink\" title=\"2. 具名插槽\"></a>2. 具名插槽</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class=\"line\">          &lt;template v-slot:s1&gt;</span><br><span class=\"line\">            &lt;ul&gt;</span><br><span class=\"line\">              &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">            &lt;/ul&gt;</span><br><span class=\"line\">          &lt;/template&gt;</span><br><span class=\"line\">          &lt;template #s2&gt;</span><br><span class=\"line\">            &lt;a href=&quot;&quot;&gt;更多&lt;/a&gt;</span><br><span class=\"line\">          &lt;/template&gt;</span><br><span class=\"line\">        &lt;/Category&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">        &lt;template&gt;</span><br><span class=\"line\">          &lt;div class=&quot;item&quot;&gt;</span><br><span class=\"line\">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">            &lt;slot name=&quot;s1&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">            &lt;slot name=&quot;s2&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        &lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-作用域插槽\"><a href=\"#3-作用域插槽\" class=\"headerlink\" title=\"3.作用域插槽\"></a>3.作用域插槽</h3><p>数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（新闻数据在News组件中，但使用数据所遍历出来的结构由App组件决定）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">      &lt;Game v-slot=&quot;params&quot;&gt;</span><br><span class=\"line\">      &lt;!-- &lt;Game v-slot:default=&quot;params&quot;&gt; --&gt;</span><br><span class=\"line\">      &lt;!-- &lt;Game #default=&quot;params&quot;&gt; --&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li v-for=&quot;g in params.games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">      &lt;/Game&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">      &lt;template&gt;</span><br><span class=\"line\">        &lt;div class=&quot;category&quot;&gt;</span><br><span class=\"line\">          &lt;h2&gt;今日游戏榜单&lt;/h2&gt;</span><br><span class=\"line\">          &lt;slot :games=&quot;games&quot; a=&quot;哈哈&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;script setup lang=&quot;ts&quot; name=&quot;Category&quot;&gt;</span><br><span class=\"line\">        import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">        let games = reactive([</span><br><span class=\"line\">          &#123;id:&#x27;asgdytsa01&#x27;,name:&#x27;英雄联盟&#x27;&#125;,</span><br><span class=\"line\">          &#123;id:&#x27;asgdytsa02&#x27;,name:&#x27;王者荣耀&#x27;&#125;,</span><br><span class=\"line\">          &#123;id:&#x27;asgdytsa03&#x27;,name:&#x27;红色警戒&#x27;&#125;,</span><br><span class=\"line\">          &#123;id:&#x27;asgdytsa04&#x27;,name:&#x27;斗罗大陆&#x27;&#125;</span><br><span class=\"line\">        ])</span><br><span class=\"line\">      &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","text":"一.setupsetup 函数返回的对象中的内容，可直接在模板中使用。setup中访问this是undefined,&#x3D;&gt;setup中不能用thissetup函数会在beforeCreate之前调用，它是“领先”所有钩子执行的。&#x3D;&gt;setup先执行1","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"ts js","slug":"【ts】","date":"2025-01-16T16:00:00.000Z","updated":"2025-01-19T13:33:26.238Z","comments":true,"path":"api/articles/【ts】.json","excerpt":"","keywords":null,"cover":null,"content":"<p>TypeScript (简称 TS) 和 JavaScript (简称 JS) 都是用于编写Web应用程序的语言，它们的区别在于：</p>\n<h1 id=\"1-类型不同\"><a href=\"#1-类型不同\" class=\"headerlink\" title=\"1.类型不同\"></a>1.类型不同</h1><p>JS:一种脚本语言，用于创建动态网页，弱类型，没有静态类型选项</p>\n<p>TS：ts是js的超集，用于解决大项项目的代码复杂性，强类型，支持静态和动态类型；ts包含了js的库和函数，ts上可以写任何的js，调用任何的js库，可以在ts中使用原生js语法</p>\n<h1 id=\"2-数据类型不同\"><a href=\"#2-数据类型不同\" class=\"headerlink\" title=\"2.数据类型不同\"></a>2.数据类型不同</h1><p>TS的数据类型有：布尔值、数字、字符串、数组、 元组（tuple）、枚举(enum)、any、void、<br>null和undefined、never、object ，unknown，</p>\n<blockquote>\n<p>基本数据类型有boolean、number 、string 、 array 、 enum 、any 、void。</p>\n</blockquote>\n<p>定义一个boolean的变量:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isDone: boolean = false;</span><br></pre></td></tr></table></figure>\n<p>JS与TS中的所有数值都是浮点型，而在TS中定义为“number”型。声明一个number类型的变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isNumber:number=6;</span><br><span class=\"line\">var isfloat:number=6.01;</span><br></pre></td></tr></table></figure>\n<p>使用一对双引号(“)或一对单引号(‘)来表示字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name: string = &quot;bob&quot;;</span><br><span class=\"line\">var family_name: string = &#x27;Green&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TypeScript 中<strong>数组</strong>使用“[]”来声明，代码如下:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var list: number[] = [1, 2, 3];</span><br><span class=\"line\">var name: string[] = [&quot;阿龙&quot;,&quot;阿猫&quot;,&quot;阿狗&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">// 访问方式 </span><br><span class=\"line\">var list: number[] = [1, 2, 3];</span><br><span class=\"line\">alert(list[0]));</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义任意类型的数组，关键字为Array.</span><br><span class=\"line\">var arr:Array = [1,2,3,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]; // 任意类型数组</span><br><span class=\"line\">alert(arr[1]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"enum\"><a href=\"#enum\" class=\"headerlink\" title=\"enum\"></a>enum</h2><p>ts新加的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;</span><br><span class=\"line\">  Red,　　　//枚举元素列表</span><br><span class=\"line\">  Green,</span><br><span class=\"line\">  Blue</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var c: Color = Color.Green;</span><br></pre></td></tr></table></figure>\n<p>假如我们有一个数值，但是我们不知道枚举类型中是否有定义，可以用以下方式来获取，代码如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;</span><br><span class=\"line\">  Red = 1,</span><br><span class=\"line\">  Green,</span><br><span class=\"line\">  Blue</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var colorName: string = Color[2]; //访问第二个枚举子元素Green</span><br><span class=\"line\">alert(colorName);</span><br><span class=\"line\">colorName = Color[4];</span><br><span class=\"line\">alert(colorName);</span><br></pre></td></tr></table></figure>\n<p>那么将会输出Green和undefined。因为Green的值是 2，而没有一个枚举定义的值是 4，所以返回undefined。</p>\n<h2 id=\"任意类型-any\"><a href=\"#任意类型-any\" class=\"headerlink\" title=\"任意类型 any\"></a>任意类型 any</h2><p>和js一样，指代是动态的，能够赋予任意类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var notSure: any = 4;</span><br><span class=\"line\">notSure = &quot;maybe a string instead&quot;;</span><br><span class=\"line\">notSure = false;  // 定义为boolen型</span><br></pre></td></tr></table></figure>\n<p>any可以配合数组来使用，代码如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var list: any[] = [1, true, &quot;free&quot;];</span><br><span class=\"line\">list[1] = 100; //更改list[1]的值</span><br></pre></td></tr></table></figure>\n<p>注意，不要滥用 any，如果任何值都指定为 any 类型，那么ts将失去它的意义</p>\n<h2 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h2><p>void 和 any 相反，any 是表示任意类型，而 void 是表示没有任意类型，就是什么类型都不是，这在我们定义函数，函数没有返回值时会用到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const consoleText = (text: string): void =&gt; &#123;</span><br><span class=\"line\">  console.log(text);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>void 类型的变量只能赋值为 undefined 和 null，其他类型不能赋值给 void 类型的变量。</p>\n<h2 id=\"never\"><a href=\"#never\" class=\"headerlink\" title=\"never\"></a>never</h2><p>never 类型指那些永不存在的值的类型，它是那些总会抛出异常或根本不会有返回值的函数表达式的返回值类型，当变量被永不为真的类型保护所约束时，该变量也是 never 类型。<br>例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const errorFunc = (message: string): never =&gt; &#123;</span><br><span class=\"line\">  throw new Error(message);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个 errorFunc 函数总是会抛出异常，所以它的返回值类型是 never，用来表明它的返回值是永不存在的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const infiniteFunc = (): never =&gt; &#123;</span><br><span class=\"line\">  while (true) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<ul>\n<li><p>never：never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值；<br>​</p>\n<blockquote>\n<p>any 和unknown的区别<br>相同： 都可以赋任意类型的值，最终该变量的类型 由最后一个值的类型决定<br>不同： any可以赋值给任意类型的变量，并将该变量的类型修改为any变量值的类型<br>    unknown 不可以<br>    可以把unknown 看做是安全的any</p>\n</blockquote>\n<pre><code>如果非要把unknown 赋值给其他类型 怎么办？\n  使用类型断言、或类型判断（通过if typeof ）\n  类型断言： 变量 as 类型 表示 告诉ts 该变量的实际类型\n</code></pre>\n</li>\n</ul>\n<p>JS的数据类型有：string,number,boolean,null,undefined,object,array,function,symbol(es6中引入)</p>\n<h1 id=\"3-类型声明\"><a href=\"#3-类型声明\" class=\"headerlink\" title=\"3.类型声明\"></a>3.类型声明</h1><p>TS中的类型声明：指定类型后，当变量赋值时，TS编译器就会自动检查值是否符合声明类型，如果符合就赋值，不符合就报错</p>\n<p>JS中的类型声明：变量类型声明并不是强制性的，因为 JavaScript 是一种动态类型语言，变量的类型会在运行时自动确定</p>\n<h1 id=\"4-编译\"><a href=\"#4-编译\" class=\"headerlink\" title=\"4.编译\"></a>4.编译</h1><p>TS需要将代码编译为js代码才能在浏览器中执行</p>\n<p>JS可以直接在浏览器中运行</p>\n<h1 id=\"5-ts的类\"><a href=\"#5-ts的类\" class=\"headerlink\" title=\"5.ts的类\"></a>5.ts的类</h1><h2 id=\"5-1-类的结构\"><a href=\"#5-1-类的结构\" class=\"headerlink\" title=\"5.1 类的结构\"></a>5.1 类的结构</h2><p>创建一个TypeScript类时，必须使用关键字class进行声明，该关键字后紧跟类的名称，之后用大括号将类体进行封装，类的基本声明格式如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 类名&#123;</span><br><span class=\"line\">    //类体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建完成类的基本结构后就可以编写类体。类体中主要包括属性和方法的声明及定义，当然也可能在类体中只定义属性或只定义方法，甚至类体内可以不定义任何属性。完整的类的定义格式如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 类名&#123;</span><br><span class=\"line\">  name:string;  //定义类的属性</span><br><span class=\"line\">  fun()&#123; //定义类的方法</span><br><span class=\"line\">           //定义该方法所要实现的功能</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为什么可以不定义任何属性？<br> 类可以被继承，它的方法和属性可以在子类中被继承<br> 未定义任何方法的空类可以作为泛型类<br> 综上未定义任何方法的空类其名称具有价值</li>\n<li>构造函数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class student&#123;  //定义student类</span><br><span class=\"line\">  name:string;  //定义类的属性</span><br><span class=\"line\">  constructor(myname:string)&#123; //定义构造函数</span><br><span class=\"line\">      this.name=myname;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  study()&#123; //定义类的方法</span><br><span class=\"line\">           //定义该方法所要实现的功能</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2-类的实例化\"><a href=\"#5-2-类的实例化\" class=\"headerlink\" title=\"5.2 类的实例化\"></a>5.2 类的实例化</h2><p>一般情况下，创建一个类后并不能直接的对属性和方法进行引用，必须对类进行实例化，即创建一个对象。TypeScript中用new 关键字创建对象。实例化后通过“.”来访问属性和方法。实例代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class student&#123;  //定义student类</span><br><span class=\"line\">  name:string;  //定义类的属性</span><br><span class=\"line\">  constructor(myname:string)&#123; //定义带参数的构造函数</span><br><span class=\"line\">      this.name=myname;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   study()&#123; //定义类的方法</span><br><span class=\"line\">      document.write(&quot;&lt;h1&gt; My name is &quot;+this.name+&quot;.&lt;/h1&gt;&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   write():string&#123;</span><br><span class=\"line\">           return &quot;write name:&quot;+this.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类的使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1=new student(&quot;Jim&quot;);</span><br><span class=\"line\">document.write(&quot;&lt;h1&gt;&quot;+s1.name+&quot;&lt;/h1&gt;&quot;); //获取name属性</span><br><span class=\"line\">s1.study();   // 调用study方法  </span><br><span class=\"line\">document.write(&quot;&lt;h1&gt;&quot;+s1.write()+&quot;&lt;/h1&gt;&quot;);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"6-函数的不同：\"><a href=\"#6-函数的不同：\" class=\"headerlink\" title=\"6.函数的不同：\"></a>6.函数的不同：</h1><p>（1）TS：需要对函数中形参进行<strong>类型声明</strong></p>\n<p>JS中函数定义参数，传参的时候，可以传递任意类型，不够严谨</p>\n<p>（2）js中当函数没有返回值的时候 默认返回值是undefined</p>\n<p>TS: 第一种情况：不设置返回值类型，但是有返回值,这个时候TS解析器会根据返回值的类型进行判断，返回值类型是什么 函数返回值类型就是什么</p>\n<p>第二种情况：设置返回值类型，则return的值必须严格按照返回值类型进行返回</p>\n<p>第三种情况：设置返回值类型为void，<br>void:用来表示空，以函数为例，就表示没有返回值的函数,或者说 返回值为空 ，<br>如果想要一点返回值都没有，设置返回值类型为never（永远不会返回结果）</p>\n<h2 id=\"ts函数的定义与调用\"><a href=\"#ts函数的定义与调用\" class=\"headerlink\" title=\"ts函数的定义与调用\"></a>ts函数的定义与调用</h2><p>定义函数的语法为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function function_name(arg:number,arg1:number,....):return_type&#123;</span><br><span class=\"line\">  code 函数要执行的代码;</span><br><span class=\"line\">  return data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>_returntype为该函数的返回值类型</strong> ,function 为声明函数的关键字，function_name 为自定义函数的名字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(x: number, y: number): number &#123;  //定义返回值为number类型的函数</span><br><span class=\"line\">    return x+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(5,6); //调用函数</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匿名函数<br> 匿名函数是没有名称只有主体的函数，不需要指定返回类型，它的返回值类型是从函数主体内的 return 语句推断的。如下代码：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myAdd = function(x:number, y:number) &#123; //定义匿名函数</span><br><span class=\"line\">  return x+y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">myAdd(3,4); //调用匿名函数</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可选与默认参数<br>可选参数：在参数名后面，冒号前面添加一个问号，则表明该参数是可选的。如下代码：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function buildName(firstName: string, lastName?: string) &#123; //lastName为可选参数</span><br><span class=\"line\">  if (lastName)</span><br><span class=\"line\">      return firstName + &quot; &quot; + lastName;</span><br><span class=\"line\">  else</span><br><span class=\"line\">      return firstName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result1 = buildName(&quot;Bob&quot;);  //正确调用 Bob</span><br><span class=\"line\">var result2 = buildName(&quot;Bob&quot;, &quot;Adams&quot;); //正确调用 Bob Adams</span><br></pre></td></tr></table></figure>\n<p>默认参数：在参数名后直接给定一个值，如果这个值没有被传入，那么将会被赋值为默认值。如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function buildName(firstName: string, lastName = &quot;Smith&quot;) &#123;</span><br><span class=\"line\">  return firstName + &quot; &quot; + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var result1 = buildName(&quot;Bob&quot;);  //没有传入第二个参数，则被赋值为默认的smith,结果为:Bob Smith</span><br><span class=\"line\">var result2 = buildName(&quot;Bob&quot;, &quot;Adams&quot;);  //结果为:Bob Adams</span><br></pre></td></tr></table></figure>\n<p>注：<strong>可选参数和默认参数必须在参数列表的最后。</strong></p>\n<h1 id=\"7-数组类型声明：\"><a href=\"#7-数组类型声明：\" class=\"headerlink\" title=\"7.数组类型声明：\"></a>7.数组类型声明：</h1><p>js中，数组的元素，可以是任意类型，没有局限性</p>\n<p>TS中,对数组类型声明之后就只能存放一种数据类型的数据，假如想创建一个能存储任意类型的数组</p>\n<blockquote>\n<p>let e:Array<any> &#x2F; let e:any[];</p>\n</blockquote>\n<ul>\n<li>第一种：</li>\n</ul>\n<blockquote>\n<p>let 变量名:类型名[];</p>\n</blockquote>\n<ul>\n<li>第二种：</li>\n</ul>\n<blockquote>\n<p>let 变量名:Array&lt;类型名&gt;;</p>\n</blockquote>\n<h1 id=\"8-TS中的枚举和JS中的对象不一样\"><a href=\"#8-TS中的枚举和JS中的对象不一样\" class=\"headerlink\" title=\"8.TS中的枚举和JS中的对象不一样\"></a>8.TS中的枚举和JS中的对象不一样</h1><p>枚举代表的是一系列特定类型的对象 这是从别的编程语言派生出来的概念，所以我们不能用 js 的概念强加到它上面，其实枚举最好理解的就是一系列确定的常量。枚举中的属性，只能用来取值，不能重新赋值 [只读属性]</p>\n<h1 id=\"9-创建对象的方式：\"><a href=\"#9-创建对象的方式：\" class=\"headerlink\" title=\"9.创建对象的方式：\"></a>9.创建对象的方式：</h1><p>JS的创建对象的方式：1.基于Object的方式创建对象，2.对象字面量，3.构造函数，4.原型prototype，5.class 类</p>\n<p>TS的创建对象的方式：1、通过字面量 2、通过0bject 3、通过工厂模式创建 4、通过构造函数创建 5、通过class类创建 6、可以通过实现接口创建 7、通过继承抽象类创建</p>\n<h1 id=\"10-ts接口与类\"><a href=\"#10-ts接口与类\" class=\"headerlink\" title=\"10.ts接口与类\"></a>10.ts接口与类</h1><h2 id=\"10-1-定义和用途\"><a href=\"#10-1-定义和用途\" class=\"headerlink\" title=\"10.1. 定义和用途\"></a>10.1. 定义和用途</h2><ul>\n<li><p>接口：<strong>用于限制对象的具体属性</strong><br>用于定义对象的结构和类型，包括属性和方法的名称及其类型。接口提供了一种协议，确保实现它的对象遵循特定的形态。它不包含任何实现细节。</p>\n</li>\n<li><p>类：用于创建对象的蓝图，包括属性和方法的实现。类可以包含构造函数、访问修饰符（如 public、private）、静态方法等，允许创建对象的实例。</p>\n</li>\n</ul>\n<h2 id=\"10-2-实现\"><a href=\"#10-2-实现\" class=\"headerlink\" title=\"10.2.实现\"></a>10.2.实现</h2><p>接口：接口可以被类实现（使用 implements 关键字），一个类可以实现多个接口，达到多重继承的效果。</p>\n<p>类：类可以继承其他类（使用 extends 关键字），该过程中可以重用父类的实现和属性。但一个类只能继承一个父类，这被称为单继承。</p>\n<h2 id=\"10-3可以包含的内容\"><a href=\"#10-3可以包含的内容\" class=\"headerlink\" title=\"10.3可以包含的内容\"></a>10.3可以包含的内容</h2><ul>\n<li><p>接口：只能定义属性和方法的签名，不能包含具体的实现。接口可以扩展其他接口。</p>\n</li>\n<li><p>类：可以包含完整的方法实现、构造函数、字段、修饰符等。</p>\n</li>\n</ul>\n<h2 id=\"10-4-实例化\"><a href=\"#10-4-实例化\" class=\"headerlink\" title=\"10.4 实例化\"></a>10.4 实例化</h2><blockquote>\n<ul>\n<li>接口：不能被实例化。接口只是定义的一个约束，不能用作对象的实例。</li>\n<li>类：可以被实例化。类可以通过 new 操作符创建对象的实例。</li>\n</ul>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 定义接口  </span><br><span class=\"line\">interface Animal &#123;  </span><br><span class=\"line\">    name: string;  </span><br><span class=\"line\">    sound(): string;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\">// 实现接口的类  </span><br><span class=\"line\">class Dog implements Animal &#123;  </span><br><span class=\"line\">    name: string;  </span><br><span class=\"line\"> </span><br><span class=\"line\">    constructor(name: string) &#123;  </span><br><span class=\"line\">        this.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\">    sound(): string &#123;  </span><br><span class=\"line\">        return &quot;Bark&quot;;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\">// 实例化类  </span><br><span class=\"line\">const myDog = new Dog(&quot;Buddy&quot;);  </span><br><span class=\"line\">console.log(myDog.name); // 输出：Buddy  </span><br><span class=\"line\">console.log(myDog.sound()); // 输出：Bark</span><br></pre></td></tr></table></figure>\n<p>在这个示例中，Animal 是一个接口，定义了 name 属性和 sound 方法。Dog 是一个实现了 Animal 接口的类，具体实现了 sound 方法。最后，我们用 new 关键字创建了 Dog 的实例</p>\n</blockquote>\n<ul>\n<li>接口用来申明方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Animal &#123;   // 动物接口</span><br><span class=\"line\">    eat() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Sheep implements Animal &#123; // implements声明sheep类实现Animal接口</span><br><span class=\"line\">    // 当一个类实现一个接口时必须实现接口中声明的方法,否则报错</span><br><span class=\"line\">    eat() &#123;</span><br><span class=\"line\">        console.log(&#x27;sheep实现animal接口&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>当一个类实现一个接口时必须实现接口中声明的方法</strong></p>\n<h1 id=\"11-泛型\"><a href=\"#11-泛型\" class=\"headerlink\" title=\"11.泛型\"></a>11.泛型</h1><p>JavaScript是一种基于原型的语言，而不是传统的面向对象语言，不支持模块，不支持泛型或接口</p>\n<p>TypeScript在JavaScript的基础上添加了类、接口、继承、泛型等面向对象编程的概念和特性，它允许模块化编程，可以把声明、数据、函数和类封装在模块中。使得代码组织和维护更加容易</p>\n<ul>\n<li>概述：<br>参数化的类型，一般用来限制集合的内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var workers: Array&lt;Person&gt; = [];</span><br><span class=\"line\">// 尖括号中的Person类型就是这个数组的泛型，规定了数组中只能放Person类型</span><br><span class=\"line\">workers[0] = new Person(&#x27;zhangsan&#x27;);</span><br><span class=\"line\">workers[1] = new Person(&#x27;lisi&#x27;);  </span><br><span class=\"line\">workers[2] = 1;  // 报错</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模块<br>模块将代码分割成可重用的单元，开发者可以自行决定将模块中的哪些资源（类、方法、变量）暴露出去供外部使用，哪些资源只在模块内部使用。</li>\n</ul>\n<ul>\n<li>export: 对外暴露</li>\n</ul>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a.ts</span><br><span class=\"line\">export var prop1;   // 对外暴露prop1属性</span><br><span class=\"line\">var prop2;  // 不对外暴露</span><br><span class=\"line\"></span><br><span class=\"line\">export function func1() &#123;&#125;  // 对外暴露func1方法</span><br><span class=\"line\">function func2() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export class Clazz1 &#123;&#125;</span><br><span class=\"line\">class Clazz2 &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// b.ts</span><br><span class=\"line\">import &#123;prop1, func1&#125; from &#x27;./a&#x27;;</span><br><span class=\"line\">console.log(prop1);</span><br><span class=\"line\">func1();      // 调用a.ts模块中对外暴露的方法</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-ts模块\"><a href=\"#12-ts模块\" class=\"headerlink\" title=\"12.ts模块\"></a>12.ts模块</h1><p>我们先举个例子，比如数据验证，我们需要验证用户数字的内容是否是数字或者字母时，需要使用正则表达式。</p>\n<p>var lettersRegexp &#x3D; &#x2F; ^ [A-Za-z]+$&#x2F;;</p>\n<p>var numberRegexp &#x3D; &#x2F; ^ [0-9]+$&#x2F;;</p>\n<p>使用 module 关键字来定义模块，并在末尾加花括号即可用；<br> 用export 关键字使接口、类等成员对模块外可见。<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> module Validation &#123;   //定义模块</span><br><span class=\"line\">  export interface StringValidator &#123;  //声明接口对外部可以使用</span><br><span class=\"line\">    isAcceptable(s: string): boolean;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  var lettersRegexp = /^[A-Za-z]+$/;</span><br><span class=\"line\">  var numberRegexp = /^[0-9]+$/;</span><br><span class=\"line\"></span><br><span class=\"line\">  export class LettersOnlyValidator implements StringValidator &#123;  //声明类对外部可用</span><br><span class=\"line\">    isAcceptable(s: string) &#123;</span><br><span class=\"line\">      return lettersRegexp.test(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  export class ZipCodeValidator implements StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s: string) &#123;</span><br><span class=\"line\">      return s.length === 5 &amp;&amp; numberRegexp.test(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"12-1-模块内容的调用\"><a href=\"#12-1-模块内容的调用\" class=\"headerlink\" title=\"12.1 模块内容的调用\"></a>12.1 模块内容的调用</h2><p>在前面一节中我学习了模块的声明，而在模块声明完成以后，我们就可以调用这个模块了，调用模块中的接口、类、方法等。调用方法简单，就是用模块名后面跟一个点来调用类、接口、方法等。如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var strings = [&#x27;Hello&#x27;, &#x27;98052&#x27;, &#x27;101&#x27;];</span><br><span class=\"line\">var validators: &#123; [s: string]: Validation.StringValidator; &#125; = &#123;&#125;;</span><br><span class=\"line\">validators[&#x27;ZIP code&#x27;] = new Validation.ZipCodeValidator();  //使用模块中的类</span><br><span class=\"line\">validators[&#x27;Letters only&#x27;] = new Validation.LettersOnlyValidator();</span><br><span class=\"line\">// 显示匹配结果</span><br><span class=\"line\">for(var i=0;i&amp;ltstrings.length;i++)&#123;</span><br><span class=\"line\">  for (var name in validators) &#123;</span><br><span class=\"line\">     document.write(&#x27;&quot;&#x27; + strings[i] + &#x27;&quot; &#x27; + (validators[name].isAcceptable(strings[i]) ? &#x27; matches &#x27; : &#x27; does not match &#x27;) + name+&quot;&lt;br&gt;&quot;); // 使用方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-2分隔模块到多个文件\"><a href=\"#12-2分隔模块到多个文件\" class=\"headerlink\" title=\"12.2分隔模块到多个文件\"></a>12.2分隔模块到多个文件</h2><p>随着我们项目的扩展，我们的代码总不可能只写在一个文件里。为了更好地维护项目，我们会将特定功能放到一个文件里，然后加载多个文件实现我们想需要的功能。现在我们先将上面的代码分割到多个文件里。</p>\n<ul>\n<li>文件一    Validation.ts</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module Validation &#123;</span><br><span class=\"line\">  export interface StringValidator &#123;</span><br><span class=\"line\">      isAcceptable(s: string): boolean;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>文件二   LettersOnlyValidator.ts</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;reference path=&quot;Validation.ts&quot; /&gt;</span><br><span class=\"line\">module Validation &#123;</span><br><span class=\"line\">  var lettersRegexp = /^[A-Za-z]+$/;</span><br><span class=\"line\">  export class LettersOnlyValidator implements StringValidator &#123;</span><br><span class=\"line\">      isAcceptable(s: string) &#123;</span><br><span class=\"line\">        return lettersRegexp.test(s);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>文件三    ZipCodeValidator.ts</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;reference path=&quot;Validation.ts&quot; /&gt;</span><br><span class=\"line\">module Validation &#123;</span><br><span class=\"line\">  var numberRegexp = /^[0-9]+$/;</span><br><span class=\"line\">  export class ZipCodeValidator implements StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s: string) &#123;</span><br><span class=\"line\">      return s.length === 5 &amp;&amp; numberRegexp.test(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>文件四 Test.ts</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;reference path=&quot;Validation.ts&quot; /&gt;</span><br><span class=\"line\">/// &lt;reference path=&quot;LettersOnlyValidator.ts&quot; /&gt;</span><br><span class=\"line\">/// &lt;reference path=&quot;ZipCodeValidator.ts&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var strings = [&#x27;Hello&#x27;, &#x27;98052&#x27;, &#x27;101&#x27;];</span><br><span class=\"line\">var validators: &#123; [s: string]: Validation.StringValidator; &#125; = &#123;&#125;;</span><br><span class=\"line\">validators[&#x27;ZIP code&#x27;] = new Validation.ZipCodeValidator();</span><br><span class=\"line\">validators[&#x27;Letters only&#x27;] = new Validation.LettersOnlyValidator();</span><br><span class=\"line\">for(var i=0;i&amp;ltstrings.length;i++)&#123;</span><br><span class=\"line\">  for (var name in validators) &#123;</span><br><span class=\"line\">     document.write(&#x27;&quot;&#x27; + strings[i] + &#x27;&quot; &#x27; + (validators[name].isAcceptable(strings[i]) ? &#x27; matches &#x27; : &#x27; does not match &#x27;) + name+&quot;&lt;br&gt;&quot;); //调用类的方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在项目中新建好以上四个文件，然后我们编译项目，如果我们代码编写没错的话，是能够编译通过的。</p>\n<blockquote>\n<p>我们可以见到后面三个文件开头的文档注释，</p>\n<blockquote>\n<p>&#x2F;&#x2F;&#x2F; &lt; reference path&#x3D;“Validation.ts” &#x2F;&gt;<br>&#x2F;&#x2F;&#x2F; &lt; reference path&#x3D;“LettersOnlyValidator.ts” &#x2F;&gt;<br>&#x2F;&#x2F;&#x2F; &lt; reference path&#x3D;“ZipCodeValidator.ts” &#x2F;&gt;</p>\n<blockquote>\n<blockquote>\n<p>这是告诉 TypeScript 编译器该文件依赖于哪些文件，假如依赖的文件不存在的话，编译就会不通过。当然我们不写也是可以的，只不过编译器在编译时不会帮我们检查，一般来说，还是建议写上。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"12-3-TS的编译\"><a href=\"#12-3-TS的编译\" class=\"headerlink\" title=\"12.3 TS的编译\"></a>12.3 TS的编译</h2><p>我们知道.js的文件可以直接在浏览器中运行的，而.ts或者.tsx却不行，所以我们在运行TS项目时需要编译成浏览器引擎可以识别的JS语言。同时为了提高编译速度，我们可以将稳定的module提前编译成js文件放到工程中，这样下次编译就会直接跳过该nodule的编译。在引用编译生成的 JavaScript 文件时，我们需要注意好顺序。以上面的代码为例，我们在 Html 代码中这么引用。</p>\n<h1 id=\"13-继承\"><a href=\"#13-继承\" class=\"headerlink\" title=\"13.继承\"></a>13.继承</h1><p>TypeScript 支持类的继承，可以通过 extends 关键字指定一个类继承自另一个类。</p>\n<p>而在 JavaScript 中，除了es6，其他的语法规范，不支持使用extends来继承。</p>\n<h1 id=\"13-访问修饰符\"><a href=\"#13-访问修饰符\" class=\"headerlink\" title=\"13.访问修饰符\"></a>13.访问修饰符</h1><p>TypeScript 引入了额外的访问修饰符（如 public、private 和 protected）来控制类的成员的访问范围。这增加了对类及其成员的访问权限控制。而在 JavaScript 中，类和类成员的访问权限是公共的。</p>\n<h1 id=\"14-可选的构造函数参数\"><a href=\"#14-可选的构造函数参数\" class=\"headerlink\" title=\"14.可选的构造函数参数\"></a>14.可选的构造函数参数</h1><p>在 TypeScript 中，我们可以在构造函数参数上使用 ? 表示可选参数。这使得我们可以定义构造函数参数的可选性。而在 JavaScript 中，构造函数参数是必需的。</p>\n<h1 id=\"15-重载\"><a href=\"#15-重载\" class=\"headerlink\" title=\"15.重载\"></a>15.重载</h1><p>js没有重载概念</p>\n<p>ts有可以重载：重载指的是在同一个类中定义多个同名的方法，但它们的参数类型、参数个数或返回类型不同。通过重载，我们可以为同一个方法名创建多个具有不同参数的版本。</p>\n<h1 id=\"16-重写\"><a href=\"#16-重写\" class=\"headerlink\" title=\"16.重写\"></a>16.重写</h1><p>ts增加了重写，子类覆盖了父类中的属性或者是方法叫做重写 子类和父类同名的方法和属性，在子类中重新声明的时候，就覆盖了父类原本的内容）</p>\n<h1 id=\"17-static和readonly\"><a href=\"#17-static和readonly\" class=\"headerlink\" title=\"17.static和readonly\"></a>17.static和readonly</h1><p>ts中增加了static和readonly，而js中没有</p>\n<p>static</p>\n<p>（静态修饰符，被static修饰的属性或者是方法，属于类的。可以通过类名调用，不属于实例的，实例没办使用 和es6中的static一样）</p>\n<p>readonly<br>（被readonly修饰的属性，只能读取不能修改）</p>\n","text":"TypeScript (简称 TS) 和 JavaScript (简称 JS) 都是用于编写Web应用程序的语言，它们的区别在于：1.类型不同JS:一种脚本语言，用于创建动态网页，弱类型，没有静态类型选项TS：ts是js的超集，用于解决大项项目的代码复杂性，强类型，支持静态和动态","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"es6","slug":"es6","date":"2025-01-15T14:25:29.088Z","updated":"2025-01-19T12:40:23.082Z","comments":true,"path":"api/articles/es6.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"一-入门\"><a href=\"#一-入门\" class=\"headerlink\" title=\"一.入门\"></a>一.入门</h1><ul>\n<li>const和let是在ES6中引入的两个新的变量声明关键字，用于声明变量的作用域.</li>\n</ul>\n<h1 id=\"1-const-let-var\"><a href=\"#1-const-let-var\" class=\"headerlink\" title=\"1.const let var\"></a>1.const let var</h1><h2 id=\"1-1-const：\"><a href=\"#1-1-const：\" class=\"headerlink\" title=\"1.1 const：\"></a>1.1 const：</h2><ol>\n<li></li>\n</ol>\n<p>(1)一定要赋初始值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const A; //error</span><br></pre></td></tr></table></figure>\n<p>(2)一般常量使用大写（潜规则）<br>(3)常量的值不能修改<br>(4)也具有块级作用域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    const pyaler = &#x27;uzi&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(player) //error</span><br></pre></td></tr></table></figure>\n<p>(5) 对于数组和对象的元素修改，不算作对常量的修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const TEAM = [&#x27;uzi&#x27;,&#x27;MXLG&#x27;,&#x27;Ming&#x27;,&#x27;Letme&#x27;];</span><br><span class=\"line\">TEAM.push(&#x27;Meiko&#x27;); //不报错，常量地址没有发生变化</span><br><span class=\"line\"></span><br><span class=\"line\">TEAM = 100 //error</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-const注意和应用场景\"><a href=\"#2-const注意和应用场景\" class=\"headerlink\" title=\"2.const注意和应用场景\"></a>2.const注意和应用场景</h3><p><strong>注意</strong>: <strong>对象属性修改和数组元素变化不会出发 const 错误</strong></p>\n<p><strong>应用场景</strong>：<strong>声明对象类型使用 const，非对象类型声明选择 let</strong></p>\n<h2 id=\"1-2-let：\"><a href=\"#1-2-let：\" class=\"headerlink\" title=\"1.2  let：\"></a>1.2  let：</h2><p> 1.let用于声明<strong>块级作用域</strong>的<strong>变量</strong>，它与var相比具有更小的作用域范围。在块级作用域内部声明的变量只在该块级作用域内有效，而且不会被提升到函数作用域。例如：<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function example() &#123;</span><br><span class=\"line\">  let x = 10;</span><br><span class=\"line\">  if (true) &#123;</span><br><span class=\"line\">    let x = 20;</span><br><span class=\"line\">    console.log(x); // 输出 20</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(x); // 输出 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>在使用块级作用域时，可以避免变量之间的命名冲突和问题。</li>\n<li></li>\n</ul>\n<p>2.变量不能重复声明（var可以重复声明）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let star=&#x27;罗志祥&#x27;;</span><br><span class=\"line\">let star=&#x27;小猪&#x27;  //error</span><br><span class=\"line\">//但使用var 重复定义 star 不会报错，因此要使用let，防止变量污染 </span><br></pre></td></tr></table></figure>\n\n<p>3.不存在变量提升<br>4.<strong>应用场景</strong>：<br>以后声明变量使用 let 就对了；<br>块级作用域不仅仅针对花括号，例如if 、else、while、for里面；<br>常用于for</p>\n<h2 id=\"1-3-var：\"><a href=\"#1-3-var：\" class=\"headerlink\" title=\"1.3 var：\"></a>1.3 var：</h2><p>var声明的变量属于<strong>函数作用域或全局作用域</strong>，而不是块级作用域，因此在循环或条件语句中声明的变量会被提升到外部函数作用域。例如：<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function example() &#123;</span><br><span class=\"line\">  var x = 10;</span><br><span class=\"line\">  if (true) &#123;</span><br><span class=\"line\">    var x = 20;</span><br><span class=\"line\">    console.log(x); // 输出 20</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(x); // 输出 20，而不是 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>var声明的变量存在变量提升的问题，在变量声明之前就可以访问到变量，可能导致意外的结果。</li>\n</ul>\n<h1 id=\"2-变量的解构赋值\"><a href=\"#2-变量的解构赋值\" class=\"headerlink\" title=\"2.变量的解构赋值\"></a>2.变量的解构赋值</h1><p>ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p>\n<blockquote>\n<p>数组的解构（不常用）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const F4 = [&#x27;小沈阳&#x27;，&#x27;刘能&#x27;,&#x27;赵四&#x27;,&#x27;宋小宝&#x27;]</span><br><span class=\"line\">let [xiao,liu,zhao,song] = F4; </span><br><span class=\"line\">console.log(xiao)</span><br><span class=\"line\">console.log(liu)</span><br><span class=\"line\">console.log(zhao)</span><br><span class=\"line\">console.log(song)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对象的解构（常用）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const zhao = &#123;</span><br><span class=\"line\">    name : &#x27;赵本山&#x27;，</span><br><span class=\"line\">    age: &#x27;不详&#x27;,</span><br><span class=\"line\">    xiaopin: function()&#123;</span><br><span class=\"line\">        console.log(&quot;我可以演小品&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let &#123;name,age,xiaopin&#125; = zhao;</span><br><span class=\"line\">console.log(name);</span><br><span class=\"line\">console.log(age);</span><br><span class=\"line\">console.log(xiaopin);</span><br><span class=\"line\">xiaopin();</span><br><span class=\"line\"></span><br><span class=\"line\">// 不用以上方法的话，使用xiaopin方法时，需要 zhao.xiaopin()</span><br><span class=\"line\">// 使用以上方法结构，只需要 xiaopin() ,不用带前面的 zhao.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>复杂结构</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let wangfei = &#123;</span><br><span class=\"line\"> name: &#x27;王菲&#x27;,</span><br><span class=\"line\"> age: 18,</span><br><span class=\"line\"> songs: [&#x27;红豆&#x27;, &#x27;流年&#x27;, &#x27;暧昧&#x27;, &#x27;传奇&#x27;],</span><br><span class=\"line\"> history: [</span><br><span class=\"line\"> &#123;name: &#x27;窦唯&#x27;&#125;,</span><br><span class=\"line\"> &#123;name: &#x27;李亚鹏&#x27;&#125;,</span><br><span class=\"line\"> &#123;name: &#x27;谢霆锋&#x27;&#125;</span><br><span class=\"line\"> ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let &#123;songs: [one, two, three], history: [first, second, third]&#125; = </span><br><span class=\"line\">wangfei;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：频繁使用对象方法、数组元素，就可以使用解构赋值形式</strong></p>\n<h1 id=\"3-模板字符串\"><a href=\"#3-模板字符串\" class=\"headerlink\" title=\"3.模板字符串\"></a>3.模板字符串</h1><p>模板字符串（template string）是增强版的字符串，用反引号（&#96;）标识，特点：</p>\n<p>1.字符串中可以出现换行符<br>2.可以使用 ${xxx} 形式输出变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明</span><br><span class=\"line\">let str = `我也是一个字符串`</span><br><span class=\"line\">console.log(str,typeof str);</span><br><span class=\"line\"></span><br><span class=\"line\">// 特性1：内容中可以直接出现换行符</span><br><span class=\"line\">// 否则之前使用 &quot;&quot;+ 进行拼接</span><br><span class=\"line\">let str = `&lt;ul&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;li&gt;沈腾&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t\t &lt;li&gt;玛丽&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t\t &lt;li&gt;魏翔&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t\t &lt;li&gt;艾伦&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t\t &lt;/ul&gt;`;</span><br><span class=\"line\"></span><br><span class=\"line\">// 特性2：变量拼接</span><br><span class=\"line\">let lovest = &#x27;魏翔&#x27;;</span><br><span class=\"line\">let out = `$&#123;lovest&#125;在前几年离开了开心麻花`;</span><br><span class=\"line\">console.log(out)</span><br></pre></td></tr></table></figure>\n<p><strong>注意：当遇到字符串与变量拼接的情况使用模板字符串</strong></p>\n<h1 id=\"4-简化对象写法\"><a href=\"#4-简化对象写法\" class=\"headerlink\" title=\"4.简化对象写法\"></a>4.简化对象写法</h1><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p>\n<p>属性名和变量名相同的话，可以进行简化。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let name = &#x27;尚硅谷&#x27;;</span><br><span class=\"line\">let slogon = &#x27;永远追求行业更高标准&#x27;;</span><br><span class=\"line\">let improve = function () &#123;</span><br><span class=\"line\"> console.log(&#x27;可以提高你的技能&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//属性和方法简写</span><br><span class=\"line\">let atguigu = &#123;</span><br><span class=\"line\"> name,   //name:name, 简写成 name</span><br><span class=\"line\"> slogon,  //slogon:slogon, 简写成 slogon</span><br><span class=\"line\"> improve,</span><br><span class=\"line\"> change() &#123;</span><br><span class=\"line\">\t console.log(&#x27;可以改变你&#x27;)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：对象简写形式简化了代码，所以以后用简写就对了</strong></p>\n<h1 id=\"5-箭头函数\"><a href=\"#5-箭头函数\" class=\"headerlink\" title=\"5.箭头函数\"></a>5.箭头函数</h1><p>ES6 允许使用「箭头」（&#x3D;&gt;）定义函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> //1. 通用写法              </span><br><span class=\"line\"></span><br><span class=\"line\">let sum = (a, b) =&gt; a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 这个箭头函数是下面这个函数的更短的版本：</span><br><span class=\"line\"></span><br><span class=\"line\">let sum = function(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">alert( sum(1, 2) ); // 3</span><br></pre></td></tr></table></figure>\n<p>箭头函数对于简单的操作很方便，特别是对于单行的函数。它具体有两种形式：</p>\n<p>1.不带花括号：let 变量名&#x3D;(…args) &#x3D;&gt; expression —— 右侧是一个表达式：函数计算表达式并返回其结果。<br>如果只有一个参数，则可以省略括号，例如 n &#x3D;&gt; n*2。<br>2.带花括号：let 变量名&#x3D;(…args) &#x3D;&gt; { body } —— 花括号允许我们在函数中编写多个语句，但是我们需要<br><strong>显式</strong>地 <strong>return</strong> 来返回一些内容。<br>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let sum = (a, b) =&gt; &#123;  // 花括号表示开始一个多行函数</span><br><span class=\"line\">  let result = a + b;</span><br><span class=\"line\">  return result; // 如果我们使用了花括号，那么我们需要一个显式的 “return”</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( sum(1, 2) ); // 3</span><br></pre></td></tr></table></figure>\n\n<p>3.简写<br>…(1)如果我们只有一个参数，还可以省略掉参数外的圆括号，使代码更短。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let add = n =&gt; n * 2;</span><br><span class=\"line\">// 等同于：</span><br><span class=\"line\">let add = n =&gt; &#123;</span><br><span class=\"line\">    return n *2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( add(3) ); // 6</span><br></pre></td></tr></table></figure>\n<p>(2)如果没有参数，括号则是空的（<strong>但括号必须保留）</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let sayHi = () =&gt; alert(&quot;Hello!&quot;);</span><br><span class=\"line\">sayHi();</span><br></pre></td></tr></table></figure>\n\n<p>·<br>*通用场景：箭头函数对于简单的单行行为（action）来说非常方便</p>\n<h2 id=\"5-1-特性\"><a href=\"#5-1-特性\" class=\"headerlink\" title=\"5.1 特性\"></a>5.1 特性</h2><p>1.this是静态的，this始终指向函数声明时所在作用域下的this的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function A()&#123;</span><br><span class=\"line\">    console.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let B = () =&gt; &#123;</span><br><span class=\"line\">    console.log(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">window.name = &#x27;尚硅谷&#x27;;</span><br><span class=\"line\">const school = &#123;</span><br><span class=\"line\">    name: &#x27;ATGUIGU&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//直接调用</span><br><span class=\"line\">A()   //尚硅谷</span><br><span class=\"line\">B()  //尚硅谷</span><br><span class=\"line\"></span><br><span class=\"line\">//call 改变作用域</span><br><span class=\"line\">A.call(school); //ATGUIGU</span><br><span class=\"line\">B.call(school);  //尚硅谷 箭头函数的this值未改变</span><br></pre></td></tr></table></figure>\n<p>2.不能作为构造实例化对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let A = (name,age) =&gt; &#123;</span><br><span class=\"line\">    this.name=name;</span><br><span class=\"line\">    this.age=age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let me = new A(&#x27;xiao&#x27;,123);</span><br><span class=\"line\">console.me //error</span><br></pre></td></tr></table></figure>\n<p>3.不能使用arguments变量<br>（arguments变量是用来保存实参的）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fn = () =&gt; &#123;</span><br><span class=\"line\">    console.log(arguments)；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2,3)  //error</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2样例\"><a href=\"#5-2样例\" class=\"headerlink\" title=\"5.2样例\"></a>5.2样例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;箭头函数实践&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        div &#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 200px;</span><br><span class=\"line\">            background: #58a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;ad&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        //需求-1  点击 div 2s 后颜色变成『粉色』</span><br><span class=\"line\">        //获取元素</span><br><span class=\"line\">        let ad = document.getElementById(&#x27;ad&#x27;);</span><br><span class=\"line\">\t\t\t\t// 绑定事件</span><br><span class=\"line\">        // 方法1： </span><br><span class=\"line\">        ad.addEventListener(&quot;click&quot;, function()&#123;</span><br><span class=\"line\">            //保存 this 的值</span><br><span class=\"line\">            let _this = this; //将外层的this值进行保存，下面函数里面就可以用了，</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\t否则下面函数的this不同，并没有包含style属性，就会报错</span><br><span class=\"line\">            //定时器</span><br><span class=\"line\">            setTimeout(function()&#123;</span><br><span class=\"line\">                //修改背景颜色 this</span><br><span class=\"line\">                // console.log(this);  </span><br><span class=\"line\">                _this.style.background = &#x27;pink&#x27;;</span><br><span class=\"line\">            &#125;, 2000);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">\t\t\t // 方法2： 使用箭头函数，因为箭头函数是静态的，始终指向创建时的this值 </span><br><span class=\"line\">        ad.addEventListener(&quot;click&quot;, function()&#123;</span><br><span class=\"line\">            setTimeout(() =&gt; &#123;</span><br><span class=\"line\">                //修改背景颜色 this</span><br><span class=\"line\">                this.style.background = &#x27;pink&#x27;;</span><br><span class=\"line\">            &#125;, 2000);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        //需求-2  从数组中返回偶数的元素</span><br><span class=\"line\">        const arr = [1,6,9,10,100,25];</span><br><span class=\"line\">\t\t\t\t//方法1：</span><br><span class=\"line\">        // const result = arr.filter(function(item)&#123;</span><br><span class=\"line\">        //     if(item % 2 === 0)&#123;</span><br><span class=\"line\">        //         return true;</span><br><span class=\"line\">        //     &#125;else&#123;</span><br><span class=\"line\">        //         return false;</span><br><span class=\"line\">        //     &#125;</span><br><span class=\"line\">        // &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t\t\t// 方法2： 使用箭头函数</span><br><span class=\"line\">        const result = arr.filter(item =&gt; item % 2 === 0);</span><br><span class=\"line\">        console.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 箭头函数适合与 this 无关的回调. 定时器, 数组的方法回调</span><br><span class=\"line\">        // 箭头函数不适合与 this 有关的回调.  事件回调, 对象的方法</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-rest参数\"><a href=\"#6-rest参数\" class=\"headerlink\" title=\"6.rest参数\"></a>6.rest参数</h1><p>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* 作用与 arguments 类似</span><br><span class=\"line\">*/</span><br><span class=\"line\">function add(...args)&#123;</span><br><span class=\"line\"> console.log(args);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(1,2,3,4,5);  //得到的是一个数组，可以使用数字的一些方法：filter、some、every、map</span><br><span class=\"line\">/**</span><br><span class=\"line\">* rest 参数必须是最后一个形参</span><br><span class=\"line\">*/</span><br><span class=\"line\">function minus(a,b,...args)&#123;</span><br><span class=\"line\"> console.log(a,b,args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">minus(100,1,2,3,4,5,19);</span><br></pre></td></tr></table></figure>\n<p>**<strong>注意：rest 参数非常适合不定个数参数函数的场景</strong></p>\n<h1 id=\"7-spread-扩展运算符\"><a href=\"#7-spread-扩展运算符\" class=\"headerlink\" title=\"7.spread 扩展运算符\"></a>7.spread 扩展运算符</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const tfboys=[&#x27;AA&#x27;,&#x27;BB&#x27;,&#x27;CC&#x27;]</span><br><span class=\"line\">function chunwan()&#123;</span><br><span class=\"line\">    console.log(arguments);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">chunwan(...tfboys);  //0:&#x27;AA&#x27; 1:&#x27;BB&#x27; 2:&#x27;CC&#x27;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>rest 参数 和 spread区别：</p>\n</blockquote>\n<p><strong>rest 参数</strong> ： function add(…args) 是放在函数传参<br><strong>spread</strong>： fn(…tfboys) 是放在调用函数时</p>\n<blockquote>\n<p>应用<br>1.数组的合并</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const A = [&#x27;aa&#x27;,&#x27;bb&#x27;];</span><br><span class=\"line\">const B = [&#x27;cc&#x27;,&#x27;dd&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">//方法1：</span><br><span class=\"line\">const C = A.concat(B)</span><br><span class=\"line\">console.log(C)   //[aa,bb,cc,dd]</span><br><span class=\"line\"></span><br><span class=\"line\">//方法2：（推荐）</span><br><span class=\"line\">const C = [...A,...B];</span><br><span class=\"line\">console.log(C)   //[aa,bb,cc,dd]</span><br></pre></td></tr></table></figure>\n\n<p>2.数组的克隆（浅拷贝）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const A = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;];</span><br><span class=\"line\">const B = [...A];</span><br><span class=\"line\">console.log(B)   //[a,b,c]</span><br></pre></td></tr></table></figure>\n<p>3.将伪数组转换为真正的数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const A = documents.querySelectorAll(&#x27;div&#x27;);</span><br><span class=\"line\">const B = [...A];</span><br><span class=\"line\">console.log(B) // [div,div,div]</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-Symbol\"><a href=\"#8-Symbol\" class=\"headerlink\" title=\"8.Symbol\"></a>8.Symbol</h1><h2 id=\"8-1Symbol基本使用\"><a href=\"#8-1Symbol基本使用\" class=\"headerlink\" title=\"8.1Symbol基本使用\"></a>8.1Symbol基本使用</h2><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型。</p>\n<p>Symbol 特点:</p>\n<p>1.Symbol 的值是唯一的，用来解决命名冲突的问题<br>2.Symbol 值不能与其他数据进行运算<br>3.Symbol 定义 的 对象属 性 不能 使 用 for…in 循 环遍 历 ，但 是可 以 使 用Reflect.ownKeys 来获取对象的所有键名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 创建</span><br><span class=\"line\">//创建 Symbol</span><br><span class=\"line\">let s1 = Symbol();</span><br><span class=\"line\">console.log(s1, typeof s1);  //内部实现唯一性，我们看不到</span><br><span class=\"line\"></span><br><span class=\"line\">//添加标识的 Symbol</span><br><span class=\"line\">let s2 = Symbol(&#x27;尚硅谷&#x27;);</span><br><span class=\"line\">let s2_2 = Symbol(&#x27;尚硅谷&#x27;);</span><br><span class=\"line\">console.log(s2 === s2_2);  //false</span><br><span class=\"line\"></span><br><span class=\"line\">//使用 Symbol for 定义</span><br><span class=\"line\">let s3 = Symbol.for(&#x27;尚硅谷&#x27;);</span><br><span class=\"line\">let s3_2 = Symbol.for(&#x27;尚硅谷&#x27;);</span><br><span class=\"line\">console.log(s3 === s3_2);  //true</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. 不能与其他数据进行运算</span><br><span class=\"line\">let result = s + 100  //error</span><br><span class=\"line\">let result = s &gt; 100  //error</span><br><span class=\"line\">let result = s + s  //error</span><br><span class=\"line\">\t// 数据类型</span><br><span class=\"line\">\t// USONB you are so niubility</span><br><span class=\"line\">\tu undefined</span><br><span class=\"line\">\ts string symbol</span><br><span class=\"line\">\to object</span><br><span class=\"line\">\tn bull number</span><br><span class=\"line\">\tb boolean</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.Symbol内置值</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    static [Symbol.hasInstance](param)&#123;</span><br><span class=\"line\">        console.log(param);</span><br><span class=\"line\">        console.log(&quot;我被用来检测了&quot;)；</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let o = &#123;&#125;;</span><br><span class=\"line\">console.log(o instanceof Person); //我被用来检测了，false</span><br></pre></td></tr></table></figure>\n<p><strong>注: 遇到唯一性的场景时要想到 Symbol</strong></p>\n<h2 id=\"8-2应用\"><a href=\"#8-2应用\" class=\"headerlink\" title=\"8.2应用\"></a>8.2应用</h2><p>1.给对象添加方法方式一：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let game = &#123;</span><br><span class=\"line\">    name : &#x27;ran&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let methods = &#123;</span><br><span class=\"line\">    up:Symbol()</span><br><span class=\"line\">    down:Symbol()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.up]=function()&#123;</span><br><span class=\"line\">    console.log(&#x27;aaa&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.down]=function()&#123;</span><br><span class=\"line\">    console.log(&#x27;bbb&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(game)    // name: &#x27;ran&#x27;,Symbol(),Symbol()</span><br></pre></td></tr></table></figure>\n<p>2.方式二</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let youxi = &#123;</span><br><span class=\"line\">    name: &#x27;狼人杀&#x27;，</span><br><span class=\"line\">    [Symbol(&#x27;say&#x27;)]:function()&#123;</span><br><span class=\"line\">        console.log(&#x27;阿萨德&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(youxi)    // name:&#x27;狼人杀&#x27;,Symbol(say)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"9-promise\"><a href=\"#9-promise\" class=\"headerlink\" title=\"9.promise\"></a>9.promise</h1><p>Promise 主要解决回调地狱的问题，是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。</p>\n<p>Promise的三种状态：初始化，成功，失败<br>(1)Promise构造函数：Promise(executor){}</p>\n<p>(2）Promise.prototype.then方法</p>\n<p>(3）Promise.prototype.catch方法</p>\n<p>实例化promise时传入一个函数，有两个参数：resolve和reject</p>\n<p>调用resolve封装数据则代表成功，调用reject封装数据则代表失败</p>\n<p>实例化promise对象的then方法，可以传入两个函数，第一个对应resolve封装的数据，参数是value；第二个对应reject封装的数据，参数是reason</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//实例化 Promise</span><br><span class=\"line\">const p=new Promise(function (resolve, reject)&#123;</span><br><span class=\"line\">  setTimeout(function()&#123;</span><br><span class=\"line\">    let err=&#x27;数据读取失败&#x27;</span><br><span class=\"line\">    reject(err)</span><br><span class=\"line\">  &#125;,1000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//调用promise对象的then方法</span><br><span class=\"line\">p.then(function(value)&#123;</span><br><span class=\"line\">  console.log(value)</span><br><span class=\"line\">&#125;,function(reason)&#123;</span><br><span class=\"line\">  console.log(reason)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-2-promise读取文件\"><a href=\"#9-2-promise读取文件\" class=\"headerlink\" title=\"9.2 promise读取文件\"></a>9.2 promise读取文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.引入fs模块</span><br><span class=\"line\">const fs=require(&#x27;fs&#x27;)</span><br><span class=\"line\"> </span><br><span class=\"line\">//2.使用promise封装</span><br><span class=\"line\">const p=new Promise(function(resolve,reject)&#123;</span><br><span class=\"line\">    fs.readFile(&#x27;./study.txt&#x27;,(err,data)=&gt;&#123;</span><br><span class=\"line\">        if(err) reject(err)</span><br><span class=\"line\">        resolve(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">p.then(function(value)&#123;</span><br><span class=\"line\">    console.log(value.toString())</span><br><span class=\"line\">&#125;,function(reason)&#123;</span><br><span class=\"line\">    console.log(&#x27;读取失败&#x27;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-3-Promise封装AJAX操作\"><a href=\"#9-3-Promise封装AJAX操作\" class=\"headerlink\" title=\"9.3 Promise封装AJAX操作\"></a>9.3 Promise封装AJAX操作</h2><p>原生ajax：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.创建对象</span><br><span class=\"line\">const xhr=new XMLHttpRequest()</span><br><span class=\"line\">//2.初始化</span><br><span class=\"line\">xhr.open(&#x27;GET&#x27;,&#x27;http://localhost:8080/getJoke&#x27;)</span><br><span class=\"line\">//3.发送</span><br><span class=\"line\">xhr.send()</span><br><span class=\"line\">//4.绑定事件，处理响应结果</span><br><span class=\"line\">xhr.onreadystatechange=function()&#123;</span><br><span class=\"line\">    if(xhr.readyState===4)&#123;</span><br><span class=\"line\">        if(xhr.status&gt;=200&amp;&amp;xhr.status&lt;300)&#123;</span><br><span class=\"line\">            console.log(xhr.response)</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            console.error(xhr.status)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>promise封装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p=new Promise(function(resolve, reject)&#123;</span><br><span class=\"line\">    const xhr=new XMLHttpRequest()</span><br><span class=\"line\">    xhr.open(&#x27;GET&#x27;,&#x27;http://localhost:8080/getJoke&#x27;)</span><br><span class=\"line\">    xhr.send()</span><br><span class=\"line\">    xhr.onreadystatechange=function()&#123;</span><br><span class=\"line\">        if(xhr.readyState===4)&#123;</span><br><span class=\"line\">            if(xhr.status&gt;=200&amp;&amp;xhr.status&lt;300)&#123;</span><br><span class=\"line\">                resolve(xhr.response)</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                reject(xhr.status)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p.then(function(value)&#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">&#125;,function(reason)&#123;</span><br><span class=\"line\">    console.log(reason)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-4-Promise-prototype-then-方法\"><a href=\"#9-4-Promise-prototype-then-方法\" class=\"headerlink\" title=\"9.4 Promise.prototype.then 方法\"></a>9.4 Promise.prototype.then 方法</h2><h1 id=\"10-class类\"><a href=\"#10-class类\" class=\"headerlink\" title=\"10.class类\"></a>10.class类</h1><h2 id=\"10-1特性\"><a href=\"#10-1特性\" class=\"headerlink\" title=\"10.1特性\"></a>10.1特性</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t//=================ES5========================</span><br><span class=\"line\">\t//手机</span><br><span class=\"line\">  function Phone(brand, price)&#123;</span><br><span class=\"line\">      this.brand = brand;</span><br><span class=\"line\">      this.price = price;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //添加方法</span><br><span class=\"line\">  Phone.prototype.call = function()&#123;</span><br><span class=\"line\">      console.log(&quot;我可以打电话!!&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //实例化对象</span><br><span class=\"line\">  let Huawei = new Phone(&#x27;华为&#x27;, 5999);</span><br><span class=\"line\">  Huawei.call();</span><br><span class=\"line\">  console.log(Huawei);</span><br><span class=\"line\"></span><br><span class=\"line\">  //=================ES6========================</span><br><span class=\"line\">  class shouji &#123;</span><br><span class=\"line\">\t\t\t// constructor 这个名字不能修改，在进行new Phone时，自动执行</span><br><span class=\"line\">      constructor(brand,price) &#123;</span><br><span class=\"line\">          this.brand=brand;</span><br><span class=\"line\">          this.price=price</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//对象方法，只能使用 方法名()&#123;&#125; 的写法，不能使用 方法名:function()&#123;&#125;</span><br><span class=\"line\">      call()&#123;</span><br><span class=\"line\">          console.log(&#x27;我可以打电话&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  let A = new shouji(&#x27;1+&#x27;,1999);</span><br><span class=\"line\">  console.log(A)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-2静态成员\"><a href=\"#10-2静态成员\" class=\"headerlink\" title=\"10.2静态成员\"></a>10.2静态成员</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Phone()&#123;&#125;</span><br><span class=\"line\">Phone.name=&#x27;手机&#x27;</span><br><span class=\"line\">Phone.change=function()&#123;</span><br><span class=\"line\">    console.log(&#x27;我可以改变世界&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Phone.prototype.size=&#x27;5.5inch&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">let nokia=new Phone()//实例对象nokia</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(nokia.name);//undefind</span><br><span class=\"line\">nokia.change();</span><br><span class=\"line\">console.log(nokia.size)//5.5inch</span><br></pre></td></tr></table></figure>\n<p><strong>实例对象nokia，函数对象Phone</strong><br>实例对象和函数对象的属性不互通</p>\n<p>实例对象的属性和构造函数的<strong>原型对象</strong>(prototype)相通<br>添加属性或方法要添加在原型上（prototype），实例对象是通过原型链去找属性或方法的</p>\n<hr>\n<p>把属于类而不属于实例对象的属性称为静态成员</p>\n<p>即，对于static标注的属性，<strong>属于类而并不属于实例对象</strong><br>且声明的关键字即为static</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Phone&#123;</span><br><span class=\"line\">    static name =&#x27;手机&#x27;</span><br><span class=\"line\">    static change()&#123;</span><br><span class=\"line\">        console.log(&#x27;我可以改变世界&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let nokia=new Phone()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(nokia.name)//undefind</span><br><span class=\"line\">console.log(Phone.name)//手机</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-3-ES5使用构造函数实现继承\"><a href=\"#10-3-ES5使用构造函数实现继承\" class=\"headerlink\" title=\"10.3 ES5使用构造函数实现继承\"></a>10.3 ES5使用构造函数实现继承</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Phone(brand,price)&#123;</span><br><span class=\"line\">    this.brand=brand</span><br><span class=\"line\">    this.price=price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Phone.prototype.call=function()&#123;</span><br><span class=\"line\">    console.log(&#x27;我可以打电话&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SmartPhone(brand,price,color,size)&#123;</span><br><span class=\"line\">    Phone.call(this,brand,price)</span><br><span class=\"line\">    this.color=color</span><br><span class=\"line\">    this.size=size</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 设置子级构造函数的原型</span><br><span class=\"line\">SmartPhone.prototype=new Phone</span><br><span class=\"line\">SmartPhone.prototype.constructor=SmartPhone</span><br><span class=\"line\"> </span><br><span class=\"line\">// 声明子类的方法</span><br><span class=\"line\">SmartPhone.prototype.photo=function()&#123;</span><br><span class=\"line\">    console.log(&#x27;我可以拍照&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SmartPhone.prototype.playGame=function()&#123;</span><br><span class=\"line\">    console.log(&#x27;我可以玩游戏&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const cz=new SmartPhone(&#x27;锤子&#x27;,2499,&#x27;黑色&#x27;,&#x27;5.5inch&#x27;)</span><br><span class=\"line\">console.log(cz)</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-4-class类继承\"><a href=\"#10-4-class类继承\" class=\"headerlink\" title=\"10.4 class类继承\"></a>10.4 class类继承</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Phone&#123;</span><br><span class=\"line\">    constructor(brand,price) &#123;</span><br><span class=\"line\">        this.brand=brand</span><br><span class=\"line\">        this.price=price</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call()&#123;</span><br><span class=\"line\">        console.log(&#x27;我可以打电话&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">class SmartPhone extends Phone&#123;</span><br><span class=\"line\">    constructor(brand,price,color,size) &#123;</span><br><span class=\"line\">        super(brand,price);</span><br><span class=\"line\">        this.color=color</span><br><span class=\"line\">        this.size=size</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    photo()&#123;</span><br><span class=\"line\">        console.log(&#x27;拍照&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    playGame()&#123;</span><br><span class=\"line\">        console.log(&#x27;玩游戏&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const xm=new SmartPhone(&#x27;小米&#x27;,7799,&#x27;red&#x27;,&#x27;5.5inch&#x27;)</span><br><span class=\"line\">console.log(xm)</span><br><span class=\"line\">xm.call()</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-5-子类对父类方法的重写\"><a href=\"#10-5-子类对父类方法的重写\" class=\"headerlink\" title=\"10.5 子类对父类方法的重写\"></a>10.5 子类对父类方法的重写</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SmartPhone extends Phone&#123;</span><br><span class=\"line\">    constructor(brand,price,color,size) &#123;</span><br><span class=\"line\">        super(brand,price);</span><br><span class=\"line\">        this.color=color</span><br><span class=\"line\">        this.size=size</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    photo()&#123;</span><br><span class=\"line\">        console.log(&#x27;拍照&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    playGame()&#123;</span><br><span class=\"line\">        console.log(&#x27;玩游戏&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call()&#123;</span><br><span class=\"line\">        console.log(&#x27;我可以进行视频通话&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-6-getter和setter的设置\"><a href=\"#10-6-getter和setter的设置\" class=\"headerlink\" title=\"10.6 getter和setter的设置\"></a>10.6 getter和setter的设置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Phone&#123;</span><br><span class=\"line\">    get price()&#123;</span><br><span class=\"line\">        console.log(&#x27;价格属性被读取了&#x27;)</span><br><span class=\"line\">        return &#x27;naomukiyo&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    set price(newVal)&#123;</span><br><span class=\"line\">        console.log(&#x27;价格属性被修改了：&#x27;+newVal)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let s=new Phone()</span><br><span class=\"line\">console.log(s.price) //得到price的get方法返回值</span><br><span class=\"line\">s.price=&#x27;free&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-集合介绍与API\"><a href=\"#11-集合介绍与API\" class=\"headerlink\" title=\"11.集合介绍与API\"></a>11.集合介绍与API</h1><h2 id=\"11-1-Set\"><a href=\"#11-1-Set\" class=\"headerlink\" title=\"11.1 Set\"></a>11.1 Set</h2><p>ES6提供了新的数据结构Set（集合）。它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用扩展运算符和for…of……进行遍历</p>\n<p>集合的属性和方法：</p>\n<p>1）size        返回集合的元素个数</p>\n<p>2）add        增加一个新元素，返回当前集合</p>\n<p>3）delete        删除元素，返回boolean值</p>\n<p>4）has        检测集合中是否包含某个元素，返回boolean值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明一个set</span><br><span class=\"line\">let s=new Set()</span><br><span class=\"line\">let s2=new Set([1,2,3,4,5,6])</span><br><span class=\"line\"> </span><br><span class=\"line\">// 元素个数</span><br><span class=\"line\">console.log(s2.size)</span><br><span class=\"line\">// 添加新的元素</span><br><span class=\"line\">s2.add(9)</span><br><span class=\"line\">// 删除元素</span><br><span class=\"line\">s2.delete(5)</span><br><span class=\"line\">// 检测</span><br><span class=\"line\">console.log(s2.has(4))</span><br><span class=\"line\">// 遍历</span><br><span class=\"line\">for(let v of s2)&#123;</span><br><span class=\"line\">    console.log(v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 清空</span><br><span class=\"line\">s2.clear()</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-2-集合实践\"><a href=\"#11-2-集合实践\" class=\"headerlink\" title=\"11.2 集合实践\"></a>11.2 集合实践</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr=[1,2,3,4,5,4,3,2,1]</span><br><span class=\"line\">// 1.数组去重</span><br><span class=\"line\">let result=[...new Set(arr)]</span><br><span class=\"line\">// 2.交集</span><br><span class=\"line\">let arr2=[4,5,6,5,4]</span><br><span class=\"line\">let r2=[...new Set(arr)].filter(item=&gt;&#123;</span><br><span class=\"line\">    let s2=new Set(arr2)</span><br><span class=\"line\">    return s2.has(item)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 3.并集</span><br><span class=\"line\">let union=[...new Set([...arr,...arr2])]</span><br><span class=\"line\">// 4.差集</span><br><span class=\"line\">let diff=[...new Set(arr)].filter(item=&gt;</span><br><span class=\"line\">    !new Set(arr2).has(item)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-3-Map\"><a href=\"#11-3-Map\" class=\"headerlink\" title=\"11.3 Map\"></a>11.3 Map</h2><p>ES6提供了Map数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当键。Map可以使用扩展运算符和for…of…进行遍历</p>\n<p>Map的属性和方法：</p>\n<p>1）size        返回Map的元素个数</p>\n<p>2）set        增加一个新元素，返回当前Map</p>\n<p>3）get        返回键名对象的键值</p>\n<p>4）has        检测Map中是否包含某个元素，返回boolean值</p>\n<p>5）clear        清空集合，返回undefined</p>\n<p>6）delete        根据键删除键值对</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明Map</span><br><span class=\"line\">let m=new Map()</span><br><span class=\"line\"> </span><br><span class=\"line\">// 添加元素</span><br><span class=\"line\">m.set(&#x27;name&#x27;,&#x27;尚硅谷&#x27;)</span><br><span class=\"line\">m.set(&#x27;change&#x27;,function()&#123;</span><br><span class=\"line\">    console.log(&#x27;我们可以改变你&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">let key=&#123;</span><br><span class=\"line\">    school:&#x27;ATGUIGU&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">m.set(key,[&#x27;北京&#x27;,&#x27;上海&#x27;,&#x27;深圳&#x27;])</span><br><span class=\"line\">//size</span><br><span class=\"line\">console.log(m.size)</span><br><span class=\"line\">//删除</span><br><span class=\"line\">m.delete(&#x27;name&#x27;)</span><br><span class=\"line\">//获取</span><br><span class=\"line\">console.log(m.get(&#x27;change&#x27;))</span><br><span class=\"line\">//遍历</span><br><span class=\"line\">for(let v of m)&#123;</span><br><span class=\"line\">    console.log(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"一.入门const和let是在ES6中引入的两个新的变量声明关键字，用于声明变量的作用域.1.const let var1.1 const：(1)一定要赋初始值1<br>const A; //error<br>(2)一般常量使用大写（潜规则）<br>(3)常量的值不能修改<br>","raw":null,"photos":[],"categories":[],"tags":[]}]}