{"title":"","slug":"vue3.","date":"2025-01-18T23:45:59.699Z","updated":"2025-01-18T23:59:42.122Z","comments":true,"path":"api/articles/vue3..json","photos":[],"excerpt":null,"covers":null,"content":"<h1 id=\"一-setup\"><a href=\"#一-setup\" class=\"headerlink\" title=\"一.setup\"></a>一.setup</h1><p>setup 函数返回的对象中的内容，可直接在模板中使用。</p>\n<p>setup中访问this是undefined,&#x3D;&gt;<strong>setup中不能用this</strong></p>\n<p>setup函数会在beforeCreate之前调用，它是“领先”所有钩子执行的。&#x3D;&gt;<strong>setup先执行</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;   &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">      &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">      &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;   &lt;/div&gt; &lt;/template&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script lang=&quot;ts&quot;&gt;   export default &#123;</span><br><span class=\"line\">      name:&#x27;Person&#x27;,   /*</span><br><span class=\"line\">       data()&#123;</span><br><span class=\"line\">       return&#123;</span><br><span class=\"line\">        a:100,</span><br><span class=\"line\">        c,this.name,</span><br><span class=\"line\">        d:900,</span><br><span class=\"line\">        age:90</span><br><span class=\"line\">   \t\t &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">       methods&#123;</span><br><span class=\"line\">         b()&#123;</span><br><span class=\"line\">       \t\t console.log(&quot;b&quot;)</span><br><span class=\"line\">    \t &#125;   \t&#125;  */</span><br><span class=\"line\">      </span><br><span class=\"line\">      setup()&#123;</span><br><span class=\"line\">        // 数据，(原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）</span><br><span class=\"line\">        let name = &#x27;张三&#x27;</span><br><span class=\"line\">        let age = 18</span><br><span class=\"line\">        let tel = &#x27;13888888888&#x27;</span><br><span class=\"line\">  </span><br><span class=\"line\">        // 方法，(原来写在methods中</span><br><span class=\"line\">        function changeName()&#123;</span><br><span class=\"line\">          name = &#x27;zhang-san&#x27; //注意：此时这么修改name页面是不变化的</span><br><span class=\"line\">          console.log(name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function changeAge()&#123;</span><br><span class=\"line\">          age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class=\"line\">          console.log(age)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function showTel()&#123;</span><br><span class=\"line\">          alert(tel)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        // 交出去了（返回一个对象，对象中的内容，模板中可以直接使用</span><br><span class=\"line\">        return &#123;name,age,tel,changeName,changeAge,showTel&#125;</span><br><span class=\"line\">      &#125;   &#125; &lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"setup-的返回值\"><a href=\"#setup-的返回值\" class=\"headerlink\" title=\"setup 的返回值\"></a>setup 的返回值</h2><p>若返回一个对象：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**<br>若返回一个函数：则可以自定义渲染内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup()&#123;</span><br><span class=\"line\">  return ()=&gt; &#x27;你好啊！&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"setup-语法糖\"><a href=\"#setup-语法糖\" class=\"headerlink\" title=\"setup 语法糖\"></a>setup 语法糖</h2><p>setup函数有一个语法糖，这个语法糖，可以让我们把setup独立出去，代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    name:&#x27;Person&#x27;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 下面的写法是setup语法糖 --&gt;</span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  console.log(this) //undefined</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 数据（注意：此时的name、age、tel都不是响应式数据）</span><br><span class=\"line\">  let name = &#x27;张三&#x27;</span><br><span class=\"line\">  let age = 18</span><br><span class=\"line\">  let tel = &#x27;13888888888&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changName()&#123;</span><br><span class=\"line\">    name = &#x27;李四&#x27;//注意：此时这么修改name页面是不变化的</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changAge()&#123;</span><br><span class=\"line\">    console.log(age)</span><br><span class=\"line\">    age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function showTel()&#123;</span><br><span class=\"line\">    alert(tel)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-reactive-ref\"><a href=\"#二-reactive-ref\" class=\"headerlink\" title=\"二.reactive&amp;&amp;ref\"></a>二.reactive&amp;&amp;ref</h1><h2 id=\"1-ref\"><a href=\"#1-ref\" class=\"headerlink\" title=\"1.ref\"></a>1.ref</h2><p>作用：定义响应式<strong>变量</strong>。<br><strong>语法：let xxx &#x3D; ref(初始值)。</strong><br><strong>返回值</strong>:一个RefImpl的实例对象，简称ref对象或ref，ref对象的value属性是响应式的。<br>注意点：<br>JS中操作数据需要：xxx.value，但模板中不需要.value，直接使用即可。<br>对于let name &#x3D; ref(‘张三’)来说，name不是响应式的，name.value是响应式的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。</span><br><span class=\"line\">  let name = ref(&#x27;张三&#x27;)</span><br><span class=\"line\">  let age = ref(18)</span><br><span class=\"line\">  // tel就是一个普通的字符串，不是响应式的</span><br><span class=\"line\">  let tel = &#x27;13888888888&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  function changeName()&#123;</span><br><span class=\"line\">    // JS中操作ref对象时候需要.value</span><br><span class=\"line\">    name.value = &#x27;李四&#x27;</span><br><span class=\"line\">    console.log(name.value)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。</span><br><span class=\"line\">    // name = ref(&#x27;zhang-san&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function changeAge()&#123;</span><br><span class=\"line\">    // JS中操作ref对象时候需要.value</span><br><span class=\"line\">    age.value += 1 </span><br><span class=\"line\">    console.log(age.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function showTel()&#123;</span><br><span class=\"line\">    alert(tel)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-reactive\"><a href=\"#2-reactive\" class=\"headerlink\" title=\"2.reactive\"></a>2.reactive</h2><p>【reactive 创建：对象类型的响应式数据】<br>作用：定义一个响应式<strong>对象</strong>（<strong>基本类型不要用它，要用ref，否则报错</strong>）<br>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let 响应式对象= reactive(源对象)。</span><br></pre></td></tr></table></figure>\n<p>返回值:一个<strong>Proxy</strong>的实例对象，简称：响应式对象。<br>注意点：reactive定义的响应式数据是**“深层次”**的。(见下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据</span><br><span class=\"line\">let car = reactive(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class=\"line\">let games = reactive([</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/////////////////////////////////////////深层次</span><br><span class=\"line\">let obj = reactive(&#123;</span><br><span class=\"line\">  a:&#123;</span><br><span class=\"line\">    b:&#123;</span><br><span class=\"line\">      c:&#123;</span><br><span class=\"line\">        d:666</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">function changeCarPrice() &#123;</span><br><span class=\"line\">  car.price += 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function changeFirstGame() &#123;</span><br><span class=\"line\">  games[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\">  obj.a.b.c.d = 999</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-【ref-创建：对象类型的响应式数据】\"><a href=\"#3-【ref-创建：对象类型的响应式数据】\" class=\"headerlink\" title=\"3.【ref 创建：对象类型的响应式数据】\"></a>3.【ref 创建：对象类型的响应式数据】</h2><ul>\n<li>其实ref接收的数据可以是：基本类型、对象类型。</li>\n<li>若ref接收的是对象类型，内部其实也是调用了reactive函数。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class=\"line\">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据</span><br><span class=\"line\">let car = ref(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class=\"line\">let games = ref([</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class=\"line\">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class=\"line\">])</span><br><span class=\"line\">let obj = ref(&#123;</span><br><span class=\"line\">  a:&#123;</span><br><span class=\"line\">    b:&#123;</span><br><span class=\"line\">      c:&#123;</span><br><span class=\"line\">        d:666</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(car)</span><br><span class=\"line\"></span><br><span class=\"line\">function changeCarPrice() &#123;</span><br><span class=\"line\">  car.value.price += 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function changeFirstGame() &#123;</span><br><span class=\"line\">  games.value[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\">  obj.value.a.b.c.d = 999</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-【ref-对比-reactive】\"><a href=\"#4-【ref-对比-reactive】\" class=\"headerlink\" title=\"4.【ref 对比 reactive】\"></a>4.【ref 对比 reactive】</h2><p>ref用来定义：基本类型数据、对象类型数据；</p>\n<p>reactive用来定义：对象类型数据。</p>\n<ul>\n<li>使用原则<br>1.若需要一个基本类型的响应式数据，必须使用ref。<br>2.若需要一个响应式对象，层级不深，ref、reactive都可以。<br>3.若需要一个响应式对象，且层级较深，推荐使用reactive。</li>\n</ul>\n<h1 id=\"三-watch\"><a href=\"#三-watch\" class=\"headerlink\" title=\"三.watch\"></a>三.watch</h1><p>作用：监视数据的变化<br>特点：Vue3中的watch只能监视以下四种数据：</p>\n<p>1.ref定义的数据。<br>2.reactive定义的数据。<br>3.函数返回一个值（getter函数）。<br>4.一个包含上述内容的数组。</p>\n<ul>\n<li>情况一<br>监视ref定义的【基本类型】数据：直接写数据名即可，监视的是其value值的改变。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;person&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据</span><br><span class=\"line\">    &lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class=\"line\">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">  // 数据</span><br><span class=\"line\">  let sum = ref(0)</span><br><span class=\"line\">  // 方法</span><br><span class=\"line\">  function changeSum()&#123;</span><br><span class=\"line\">    sum.value += 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 监视，情况一：监视【ref】定义的【基本类型】数据</span><br><span class=\"line\">  const stopWatch = watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class=\"line\">    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)</span><br><span class=\"line\">    if(newValue &gt;= 10)&#123;</span><br><span class=\"line\">      stopWatch()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>情况二<br>监视ref定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 注意：</span><br><span class=\"line\"></span><br><span class=\"line\">\t若修改的是ref定义的对象中的属性，newValue 和 oldValue 都是新值，因为它们是同一个对象。</span><br><span class=\"line\"></span><br><span class=\"line\">\t若修改整个ref定义的对象，newValue 是新值， oldValue 是旧值，因为不是同一个对象了。</span><br></pre></td></tr></table></figure>\n<pre><code>&lt;template&gt;\n</code></pre>\n  <div class=\"person\">\n    <h1>情况二：监视【ref】定义的【对象类型】数据</h1>\n    <h2>姓名：</h2>\n    <h2>年龄：</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changePerson\">修改整个人</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,watch} from 'vue'\n  // 数据\n  let person = ref({\n    name:'张三',\n    age:18\n  })\n  // 方法\n  function changeName(){\n    person.value.name += '~'\n  }\n  function changeAge(){\n    person.value.age += 1\n  }\n  function changePerson(){\n    person.value = {name:'李四',age:90}\n  }\n  /* \n    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\n    watch的第一个参数是：被监视的数据\n    watch的第二个参数是：监视的回调\n    watch的第三个参数是：配置对象（deep、immediate等等.....） \n  */\n  watch(person,(newValue,oldValue)=>{\n    console.log('person变化了',newValue,oldValue)\n  },{deep:true})\n  \n</script>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 情况三</span><br><span class=\"line\">监视reactive定义的【对象类型】数据，且默认开启了深度监视。</span><br></pre></td></tr></table></figure>\n<template>\n  <div class=\"person\">\n    <h1>情况三：监视【reactive】定义的【对象类型】数据</h1>\n    <h2>姓名：</h2>\n    <h2>年龄：</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changePerson\">修改整个人</button>\n    <hr>\n    <h2>测试：</h2>\n    <button @click=\"test\">修改obj.a.b.c</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18\n  })\n  let obj = reactive({\n    a:{\n      b:{\n        c:666\n      }\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changePerson(){\n    Object.assign(person,{name:'李四',age:80})\n  }\n  function test(){\n    obj.a.b.c = 888\n  }\n\n  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的\n  watch(person,(newValue,oldValue)=>{\n    console.log('person变化了',newValue,oldValue)\n  })\n  watch(obj,(newValue,oldValue)=>{\n    console.log('Obj变化了',newValue,oldValue)\n  })\n</script>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 情况四</span><br><span class=\"line\">监视ref或reactive定义的【对象类型】数据中的**某个属性**，注意点如下：</span><br><span class=\"line\"></span><br><span class=\"line\">1.若该属性值不是【对象类型】，需要写成函数形式。</span><br><span class=\"line\">2.若该属性值是依然是【对象类型】，可直接编，也可写成函数，建议写成函数。</span><br><span class=\"line\"></span><br><span class=\"line\">结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</span><br></pre></td></tr></table></figure>\n<template>\n  <div class=\"person\">\n    <h1>情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性</h1>\n    <h2>姓名：</h2>\n    <h2>年龄：</h2>\n    <h2>汽车：、</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeC1\">修改第一台车</button>\n    <button @click=\"changeC2\">修改第二台车</button>\n    <button @click=\"changeCar\">修改整个车</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式\n  /* watch(()=> person.name,(newValue,oldValue)=>{\n    console.log('person.name变化了',newValue,oldValue)\n  }) */\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数\n  watch(()=>person.car,(newValue,oldValue)=>{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n</script>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 情况五</span><br><span class=\"line\">监视上述的多个数据</span><br></pre></td></tr></table></figure>\n<template>\n  <div class=\"person\">\n    <h1>情况五：监视上述的多个数据</h1>\n    <h2>姓名：</h2>\n    <h2>年龄：</h2>\n    <h2>汽车：、</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeC1\">修改第一台车</button>\n    <button @click=\"changeC2\">修改第二台车</button>\n    <button @click=\"changeCar\">修改整个车</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况五：监视上述的多个数据\n  watch([()=>person.name,person.car],(newValue,oldValue)=>{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n\n</script>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【watchEffect】</span><br><span class=\"line\">官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</span><br><span class=\"line\"></span><br><span class=\"line\">watch对比watchEffect</span><br><span class=\"line\"></span><br><span class=\"line\">* 都能监听响应式数据的变化，不同的是监听数据变化的方式不同</span><br><span class=\"line\"></span><br><span class=\"line\">1.watch：要明确指出监视的数据</span><br><span class=\"line\"></span><br><span class=\"line\">2.watchEffect：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</span><br><span class=\"line\"></span><br><span class=\"line\">* 示例代码：</span><br></pre></td></tr></table></figure>\n <template>\n  <div class=\"person\">\n    <h1>需求：水温达到50℃，或水位达到20cm，则联系服务器</h1>\n    <h2 id=\"demo\">水温：</h2>\n    <h2>水位：</h2>\n    <button @click=\"changePrice\">水温+1</button>\n    <button @click=\"changeSum\">水位+10</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,watch,watchEffect} from 'vue'\n  // 数据\n  let temp = ref(0)\n  let height = ref(0)\n\n  // 方法\n  function changePrice(){\n    temp.value += 10\n  }\n  function changeSum(){\n    height.value += 1\n  }\n\n  // 用watch实现，需要明确的指出要监视：temp、height\n  watch([temp,height],(value)=>{\n    // 从value中获取最新的temp值、height值\n    const [newTemp,newHeight] = value\n    // 室温达到50℃，或水位达到20cm，立刻联系服务器\n    if(newTemp >= 50 || newHeight >= 20){\n      console.log('联系服务器')\n    }\n  })\n\n  // 用watchEffect实现，不用\n  const stopWtach = watchEffect(()=>{\n    // 室温达到50℃，或水位达到20cm，立刻联系服务器\n    if(temp.value >= 50 || height.value >= 20){\n      console.log(document.getElementById('demo')?.innerText)\n      console.log('联系服务器')\n    }\n    // 水温达到100，或水位达到50，取消监视\n    if(temp.value === 100 || height.value === 50){\n      console.log('清理了')\n      stopWtach()\n    }\n  })\n</script>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 四.【props】</span><br></pre></td></tr></table></figure>\n<p>&#x2F;&#x2F; 定义一个接口，限制每个Person对象的格式<br>export interface PersonInter {<br> id:string,<br> name:string,<br>    age:number<br>   }</p>\n<p>&#x2F;&#x2F; 定义一个自定义类型Persons<br>export type Persons &#x3D; Array<PersonInter></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App.vue中代码：</span><br></pre></td></tr></table></figure>\n<template>\n\t<Person :list=\"persons\"/>\n</template>\n  \n<script lang=\"ts\" setup name=\"App\">\n  import Person from './components/Person.vue'\n  import {reactive} from 'vue'\n    import {type Persons} from './types'\n  \n    let persons = reactive<Persons>([\n     {id:'e98219e12',name:'张三',age:18},\n      {id:'e98219e13',name:'李四',age:19},\n       {id:'e98219e14',name:'王五',age:20}\n     ])\n   </script>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.vue中代码：</span><br></pre></td></tr></table></figure>\n  <template>\n<div class=\"person\">\n <ul>\n     <li v-for=\"item in list\" :key=\"item.id\">\n        --\n      </li>\n    </ul>\n   </div>\n   </template>\n  \n<script lang=\"ts\" setup name=\"Person\">\nimport {defineProps} from 'vue'\nimport {type PersonInter} from '@/types'\n  \n  // 第一种写法：仅接收\n// const props = defineProps(['list'])\n  \n  // 第二种写法：接收+限制类型\n// defineProps<{list:Persons}>()\n  \n  // 第三种写法：接收+限制类型+指定默认值+限制必要性\nlet props = withDefaults(defineProps<{list?:Persons}>(),{\n     list:()=>[{id:'asdasg01',name:'小猪佩奇',age:18}]\n  })\n   console.log(props)\n  </script>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 五.生命周期</span><br><span class=\"line\">概念：Vue组件实例在创建时要经历一系列的初始化步骤，在此过程中Vue会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</span><br><span class=\"line\"></span><br><span class=\"line\">规律：</span><br><span class=\"line\"></span><br><span class=\"line\">* 生命周期整体分为四个阶段，分别是：创建、挂载、更新、销毁，每个阶段都有两个钩子，一前一后。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Vue3的生命周期</span><br><span class=\"line\"></span><br><span class=\"line\">创建阶段：setup</span><br><span class=\"line\"></span><br><span class=\"line\">挂载阶段：onBeforeMount、onMounted</span><br><span class=\"line\"></span><br><span class=\"line\">更新阶段：onBeforeUpdate、onUpdated</span><br><span class=\"line\"></span><br><span class=\"line\">卸载阶段：onBeforeUnmount、onUnmounted</span><br><span class=\"line\"></span><br><span class=\"line\">* 常用的钩子：onMounted(挂载完毕)、onUpdated(更新完毕)、onBeforeUnmount(卸载之前)</span><br><span class=\"line\"></span><br><span class=\"line\">* 示例代码：</span><br></pre></td></tr></table></figure>\n <template>\n  <div class=\"person\">\n    <h2>当前求和为：</h2>\n    <button @click=\"changeSum\">点我sum+1</button>\n  </div>\n</template>\n\n<!-- vue3写法 -->\n<script lang=\"ts\" setup name=\"Person\">\n  import { \n    ref, \n    onBeforeMount, \n    onMounted, \n    onBeforeUpdate, \n    onUpdated, \n    onBeforeUnmount, \n    onUnmounted \n  } from 'vue'\n\n  // 数据\n  let sum = ref(0)\n  // 方法\n  function changeSum() {\n    sum.value += 1\n  }\n  console.log('setup')\n  // 生命周期钩子\n  onBeforeMount(()=>{\n    console.log('挂载之前')\n  })\n  onMounted(()=>{\n    console.log('挂载完毕')\n  })\n  onBeforeUpdate(()=>{\n    console.log('更新之前')\n  })\n  onUpdated(()=>{\n    console.log('更新完毕')\n  })\n  onBeforeUnmount(()=>{\n    console.log('卸载之前')\n  })\n  onUnmounted(()=>{\n    console.log('卸载完毕')\n  })\n</script>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 六.路由</span><br><span class=\"line\">## 6.1对路由的理解</span><br><span class=\"line\">## 6.2基本切换小果</span><br><span class=\"line\">路由配置文件代码如下：</span><br></pre></td></tr></table></figure>\n<p>import {createRouter,createWebHistory} from ‘vue-router’<br>import Home from ‘@&#x2F;pages&#x2F;Home.vue’<br>import News from ‘@&#x2F;pages&#x2F;News.vue’<br>import About from ‘@&#x2F;pages&#x2F;About.vue’</p>\n<p>const router &#x3D; createRouter({<br>\thistory:createWebHistory(),<br>\troutes:[<br>\t\t{<br>\t\t\tpath:’&#x2F;home’,<br>\t\t\tcomponent:Home<br>\t\t},<br>\t\t{<br>\t\t\tpath:’&#x2F;about’,<br>\t\t\tcomponent:About<br>\t\t}<br>\t]<br>})<br>export default router</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.ts代码如下：</span><br></pre></td></tr></table></figure>\n<p>import router from ‘.&#x2F;router&#x2F;index’<br>app.use(router)</p>\n<p>app.mount(‘#app’)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App.vue代码如下</span><br></pre></td></tr></table></figure>\n<template>\n  <div class=\"app\">\n    <h2 class=\"title\">Vue路由测试</h2>\n    <!-- 导航区 -->\n    <div class=\"navigate\">\n      <RouterLink to=\"/home\" active-class=\"active\">首页</RouterLink>\n      <RouterLink to=\"/news\" active-class=\"active\">新闻</RouterLink>\n      <RouterLink to=\"/about\" active-class=\"active\">关于</RouterLink>\n    </div>\n    <!-- 展示区 -->\n    <div class=\"main-content\">\n      <RouterView></RouterView>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"App\">\n  import {RouterLink,RouterView} from 'vue-router'  \n</script>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 6.3两个注意</span><br><span class=\"line\">1.路由组件通常存放在pages 或 views文件夹，一般组件通常存放在components文件夹。</span><br><span class=\"line\"></span><br><span class=\"line\">2.通过点击导航，视觉效果上“消失” 了的路由组件，默认是被卸载掉的，需要的时候再去挂载。</span><br><span class=\"line\">## 6.4路由器工作模式</span><br><span class=\"line\">1.history模式</span><br><span class=\"line\">&gt;优点：URL更加美观，不带有#，更接近传统的网站URL。</span><br><span class=\"line\">缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有404错误。</span><br></pre></td></tr></table></figure>\n<p>const router &#x3D; createRouter({<br>  \thistory:createWebHistory(), &#x2F;&#x2F;history模式<br>  \t&#x2F;******&#x2F;<br>})</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.hash模式</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;优点：兼容性更好，因为不需要服务器端处理路径。</span><br><span class=\"line\">缺点：URL带有#不太美观，且在SEO优化方面相对较差。</span><br></pre></td></tr></table></figure>\n<p>const router &#x3D; createRouter({<br>  \thistory:createWebHashHistory(), &#x2F;&#x2F;hash模式<br>  \t&#x2F;******&#x2F;<br>})</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 6.5 tode两种写法</span><br></pre></td></tr></table></figure>\n<!-- 第一种：to的字符串写法 -->\n<p><router-link active-class=\"active\" to=\"/home\">主页</router-link></p>\n<!-- 第二种：to的对象写法 -->\n<p><router-link active-class=\"active\" :to=\"{path:'/home'}\">Home</router-link></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 命名路由</span><br><span class=\"line\">作用：可以简化路由跳转及传参（后面就讲）。</span><br><span class=\"line\"></span><br><span class=\"line\">给路由规则命名：</span><br></pre></td></tr></table></figure>\n<p>routes:[<br>  {<br>    name:’zhuye’,<br>    path:’&#x2F;home’,<br>    component:Home<br>  },<br>  {<br>    name:’xinwen’,<br>    path:’&#x2F;news’,<br>    component:News,<br>  },<br>  {<br>    name:’guanyu’,<br>    path:’&#x2F;about’,<br>    component:About<br>  }<br>]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 跳转路由</span><br><span class=\"line\"></span><br><span class=\"line\">1.编写News的子路由：Detail.vue</span><br><span class=\"line\">2.配置路由规则，使用children配置项：</span><br></pre></td></tr></table></figure>\n<p>const router &#x3D; createRouter({<br>  history:createWebHistory(),<br>\troutes:[<br>\t\t{<br>\t\t\tname:’zhuye’,<br>\t\t\tpath:’&#x2F;home’,<br>\t\t\tcomponent:Home<br>\t\t},<br>\t\t{<br>\t\t\tname:’xinwen’,<br>\t\t\tpath:’&#x2F;news’,<br>\t\t\tcomponent:News,<br>\t\t\tchildren:[<br>\t\t\t\t{<br>\t\t\t\t\tname:’xiang’,<br>\t\t\t\t\tpath:’detail’,<br>\t\t\t\t\tcomponent:Detail<br>\t\t\t\t}<br>\t\t\t]<br>\t\t},<br>\t\t{<br>\t\t\tname:’guanyu’,<br>\t\t\tpath:’&#x2F;about’,<br>\t\t\tcomponent:About<br>\t\t}<br>\t]<br>})<br>export default router</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">记得去Home组件中预留一个&lt;router-view&gt;</span><br></pre></td></tr></table></figure>\n<template>\n  <div class=\"news\">\n    <nav class=\"news-list\">\n      <RouterLink v-for=\"news in newsList\" :key=\"news.id\" :to=\"{path:'/news/detail'}\">\n        \n      </RouterLink>\n    </nav>\n    <div class=\"news-detail\">\n      <RouterView/>\n    </div>\n  </div>\n</template>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 路由传参</span><br><span class=\"line\">### query参数</span><br><span class=\"line\">传递参数</span><br></pre></td></tr></table></figure>\n<!-- 跳转并携带query参数（to的字符串写法） -->\n<router-link to=\"/news/detail?a=1&b=2&content=欢迎你\">\n\t跳转\n</router-link>\n\t\t\t\t\n<!-- 跳转并携带query参数（to的对象写法） -->\n<p>&lt;RouterLink<br>  :to&#x3D;”{<br>    &#x2F;&#x2F;name:’xiang’, &#x2F;&#x2F;用name也可以跳转<br>    path:’&#x2F;news&#x2F;detail’,<br>    query:{<br>      id:news.id,<br>      title:news.title,<br>      content:news.content<br>    }<br>  }”</p>\n<blockquote>\n</blockquote>\n  \n</RouterLink>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接收参数：</span><br></pre></td></tr></table></figure>\nimport {useRoute} from 'vue-router'\nconst route = useRoute()\n// 打印query参数\nconsole.log(route.query)\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### params参数</span><br><span class=\"line\">传递参数</span><br></pre></td></tr></table></figure>\n<!-- 跳转并携带params参数（to的字符串写法） -->\n<RouterLink :to=\"`/news/detail/001/新闻001/内容001`\"></RouterLink>\n\t\t\t\t\n<!-- 跳转并携带params参数（to的对象写法） -->\n<p>&lt;RouterLink<br>  :to&#x3D;”{<br>    name:’xiang’, &#x2F;&#x2F;用name跳转<br>    params:{<br>      id:news.id,<br>      title:news.title,<br>      content:news.title<br>    }<br>  }”</p>\n<blockquote>\n</blockquote>\n  \n</RouterLink>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接收参数</span><br></pre></td></tr></table></figure>\nimport {useRoute} from 'vue-router'\nconst route = useRoute()\n// 打印params参数\nconsole.log(route.params)\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;1：传递params参数时，若使用to的对象写法，必须使用name配置项，不能用path。</span><br><span class=\"line\">2：传递params参数时，需要提前在规则中占位。</span><br><span class=\"line\"></span><br><span class=\"line\">## replace属性</span><br><span class=\"line\"></span><br><span class=\"line\">* 作用：控制路由跳转时操作浏览器历史记录的模式。</span><br><span class=\"line\"></span><br><span class=\"line\">* 浏览器的历史记录有两种写入方式：分别为push和replace：</span><br><span class=\"line\">&gt;push是追加历史记录（默认值）。</span><br><span class=\"line\">replace是替换当前记录。</span><br><span class=\"line\"></span><br><span class=\"line\">* 开启replace模式：</span><br></pre></td></tr></table></figure>\n <RouterLink replace .......>News</RouterLink>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\nimport {useRoute,useRouter} from 'vue-router'\n\n<p>const route &#x3D; useRoute()<br>const router &#x3D; useRouter()</p>\n<p>console.log(route.query)<br>console.log(route.parmas)<br>console.log(router.push)<br>console.log(router.replace)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重定向</span><br><span class=\"line\">作用：将特定的路径，重新定向到已有路由。</span><br></pre></td></tr></table></figure>\n<p>{<br>    path:’&#x2F;‘,<br>    redirect:’&#x2F;about’<br>}</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 七.pinia</span><br><span class=\"line\">## 7.1准备一个效果</span><br><span class=\"line\">## 7.2搭建 pinia 环境</span><br><span class=\"line\">第一步：npm install pinia</span><br><span class=\"line\"></span><br><span class=\"line\">第二步：操作src/main.ts</span><br></pre></td></tr></table></figure>\n<p>import { createApp } from ‘vue’<br>import App from ‘.&#x2F;App.vue’</p>\n<p>&#x2F;* 引入createPinia，用于创建pinia *&#x2F;<br>import { createPinia } from ‘pinia’</p>\n<p>&#x2F;* 创建pinia *&#x2F;<br>const pinia &#x3D; createPinia()<br>const app &#x3D; createApp(App)</p>\n<p>&#x2F;* 使用插件 *&#x2F;{}<br>app.use(pinia)<br>app.mount(‘#app’)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 7.3 存储+读取数据</span><br><span class=\"line\">Store是一个保存：状态、业务逻辑 的实体，每个组件都可以读取、写入它。</span><br><span class=\"line\"></span><br><span class=\"line\">它有三个概念：state、getter、action，相当于组件中的： data、 computed 和 methods。</span><br><span class=\"line\"></span><br><span class=\"line\">具体编码：src/store/count.ts</span><br><span class=\"line\">## 7.4修改数据</span><br><span class=\"line\">1.直接修改</span><br></pre></td></tr></table></figure>\n<p>countStore.sum &#x3D; 666</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.批量修改</span><br></pre></td></tr></table></figure>\n<p>countStore.$patch({<br>  sum:999,<br>  school:’atguigu’<br>})</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.借助action修改（action中可以编写一些业务逻辑）</span><br></pre></td></tr></table></figure>\n<p>import { defineStore } from ‘pinia’</p>\n<p>export const useCountStore &#x3D; defineStore(‘count’, {</p>\n<p>  actions: {<br>    &#x2F;&#x2F;加<br>    increment(value:number) {<br>      if (this.sum &lt; 10) {<br>        &#x2F;&#x2F;操作countStore中的sum<br>        this.sum +&#x3D; value<br>      }<br>    },<br>    &#x2F;&#x2F;减<br>    decrement(value:number){<br>      if(this.sum &gt; 1){<br>        this.sum -&#x3D; value<br>      }<br>    }<br>  },</p>\n<p>})</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.组件中调用action</span><br></pre></td></tr></table></figure>\n<p>&#x2F;&#x2F; 使用countStore<br>const countStore &#x3D; useCountStore()</p>\n<p>&#x2F;&#x2F; 调用对应action<br>countStore.incrementOdd(n.value)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 5.storeToRefs</span><br><span class=\"line\"></span><br><span class=\"line\">* 借助storeToRefs将store中的数据转为ref对象，方便在模板中使用。</span><br><span class=\"line\">* 注意：pinia提供的storeToRefs只会将数据做转换，而Vue的toRefs会转换store中数据。</span><br></pre></td></tr></table></figure>\n<template>\n\t<div class=\"count\">\n\t\t<h2>当前求和为：</h2>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"Count\">\n  import { useCountStore } from '@/store/count'\n  /* 引入storeToRefs */\n  import { storeToRefs } from 'pinia'\n\n\t/* 得到countStore */\n  const countStore = useCountStore()\n  /* 使用storeToRefs转换countStore，随后解构 */\n  const {sum} = storeToRefs(countStore)\n</script>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 6.getters</span><br><span class=\"line\">概念：当state中的数据，需要经过处理后再使用时，可以使用getters配置。</span><br><span class=\"line\"></span><br><span class=\"line\">追加getters配置。</span><br></pre></td></tr></table></figure>\n<p>&#x2F;&#x2F; 引入defineStore用于创建store<br>import {defineStore} from ‘pinia’</p>\n<p>&#x2F;&#x2F; 定义并暴露一个store<br>export const useCountStore &#x3D; defineStore(‘count’,{<br>  &#x2F;&#x2F; 动作<br>  actions:{<br>    &#x2F;************&#x2F;<br>  },<br>  &#x2F;&#x2F; 状态<br>  state(){<br>    return {<br>      sum:1,<br>      school:’atguigu’<br>    }<br>  },<br>  &#x2F;&#x2F; 计算<br>  getters:{<br>    bigSum:(state):number &#x3D;&gt; state.sum *10,<br>    upperSchool():string{<br>      return this. school.toUpperCase()<br>    }<br>  }<br>})</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组件中读取数据：</span><br></pre></td></tr></table></figure>\n<p>const {increment,decrement} &#x3D; countStore<br>let {sum,school,bigSum,upperSchool} &#x3D; storeToRefs(countStore)</p>\n<pre><code>\n\n\n\n\n\n</code></pre>\n","categories":[],"tags":[]}