{"title":"elementui","slug":"elementui】","date":"2025-01-21T14:33:18.480Z","updated":"2025-01-21T14:32:49.816Z","comments":true,"path":"api/articles/elementui】.json","photos":[],"excerpt":null,"covers":["https://i-blog.csdnimg.cn/direct/2e6c474bbe8e473fa6b615df8c9a6a58.png","https://i-blog.csdnimg.cn/direct/5226bcc76d7a4eaa8f9e59b5f8387bee.png"],"content":"<h1 id=\"一-页面布局el-container\"><a href=\"#一-页面布局el-container\" class=\"headerlink\" title=\"一.页面布局el-container\"></a>一.页面布局el-container</h1><h2 id=\"页面布局el-container\"><a href=\"#页面布局el-container\" class=\"headerlink\" title=\"页面布局el-container\"></a>页面布局el-container</h2><p>①. 效果图如下:<br>一般包含四个部分(<br>头:用来放置查询条件(表单)<br>主题部分：表格的显示(表格)<br>尾部(分页)<br>弹出层<br>)<br><img src=\"https://i-blog.csdnimg.cn/direct/2e6c474bbe8e473fa6b615df8c9a6a58.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"②-常用几种布局\"><a href=\"#②-常用几种布局\" class=\"headerlink\" title=\"②. 常用几种布局\"></a>②. 常用几种布局</h2><blockquote>\n<p>布局<br>(1). 头、主体、尾部、弹出层<br><img src=\"https://i-blog.csdnimg.cn/direct/5226bcc76d7a4eaa8f9e59b5f8387bee.png\" alt=\"在这里插入图片描述\"><br>2). 头、主体、尾部、弹出层、侧边栏<br><img src=\"https://i-blog.csdnimg.cn/direct/43f4cf32f68f4c268a853cf39552d781.png\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n<h1 id=\"二-表单\"><a href=\"#二-表单\" class=\"headerlink\" title=\"二. 表单\"></a>二. 表单</h1><h2 id=\"1-表单基础说明\"><a href=\"#1-表单基础说明\" class=\"headerlink\" title=\"1)表单基础说明\"></a>1)表单基础说明</h2><p>①. 数据的双向绑定：通过：model 和 v-model</p>\n<p>②. 表单中输入框离开焦点时,通过：rules 来完成校验</p>\n<p>③. 全局校验：this.r e f s [ r e f ] . v a l i d a t e ( ( v a l i d ) &#x3D; &gt; ) [ 如 果 v a l i d &#x3D; &#x3D; t r u e 表 示 校 验 成 功 ] ( t h i s . refs[ref].validate((valid)&#x3D;&gt;{ }) [如果valid&#x3D;&#x3D;true表示校验成功] ( this.refs[ref].validate((valid)&#x3D;&gt;)[如果valid&#x3D;&#x3D;true表示校验成功](this.refs.loginFromRef.validate(async valid &#x3D;&gt; {)</p>\n<p>表单数据 formData: { },&#x2F;&#x2F;表单数据<br>注意：这里的rules是在data{ } 大括号当中的</p>\n<h2 id=\"2-转成行内元素-inline-“true”\"><a href=\"#2-转成行内元素-inline-“true”\" class=\"headerlink\" title=\"2)转成行内元素(:inline&#x3D;“true”)\"></a>2)转成行内元素(:inline&#x3D;“true”)</h2><p>如果想要呈现每一个el-form-item 成行内元素,我们将设置:inline&#x3D;“true”<br>(eleme后台的el-form表单分为左右两边放数据 :inline&#x3D;“true”)</p>\n<h2 id=\"3-表单重置问题-resetFields\"><a href=\"#3-表单重置问题-resetFields\" class=\"headerlink\" title=\"3)表单重置问题(resetFields)\"></a>3)表单重置问题(resetFields)</h2><p>(对整个表单进行重置，将所有字段值重置为初始值并移除校验结果)<br>(以下三步都是必须的)</p>\n<p>①. el-form添加ref</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form ref=&quot;refname&quot;&gt;&lt;/el-form&gt;</span><br></pre></td></tr></table></figure>\n<p>②. form的每个item加prop属性（踩了好久的坑这个,需要和绑定数据的最后名称一致，prop属性添加到form-item上） 关键</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form-item prop=&quot;name&quot;&gt;</span><br><span class=\"line\">    &lt;el-input v-model=&quot;query.name&quot;&gt;&lt;/el-input&gt;</span><br><span class=\"line\">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>\n<p>element 中重置resetFields 函数 是恢复初始值 , 并非置空</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form-item&gt;</span><br><span class=\"line\">    &lt;el-button @click=&quot;resetForm(&#x27;refname&#x27;)&quot;&gt;清空&lt;/el-button&gt;</span><br><span class=\"line\">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>\n<p> 进行表单重置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   方式一:</span><br><span class=\"line\">restForm(refname) &#123;</span><br><span class=\"line\">   this.$refs[refname].resetFields()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">方式二:</span><br><span class=\"line\">resetForm(formName) &#123;</span><br><span class=\"line\">    this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">        this.$refs[formName].resetFields();</span><br><span class=\"line\">        this[formName] = &#123;&#125;;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   方式三:</span><br><span class=\"line\">   resetForm()&#123;</span><br><span class=\"line\">     // resetFields需要获取到ref中的表单对象</span><br><span class=\"line\">     this.$refs.queryFormRef.resetFields();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p> 代码演示：<br>(this.$refs[formName].resetFields( ) )<br>(this.$refs.queryFormRef.resetFields ( ) )<br>( this.$nextTick(( ) &#x3D;&gt; { this.$refs[formName].resetFields( ); }))</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form :model=&quot;ruleForm&quot; status-icon  ref=&quot;ruleForm&quot; label-width=&quot;100px&quot; class=&quot;demo-ruleForm&quot;&gt;</span><br><span class=\"line\">  &lt;el-form-item&gt;</span><br><span class=\"line\">    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;)&quot;&gt;提交&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;el-button @click=&quot;resetForm(&#x27;ruleForm&#x27;)&quot;&gt;重置&lt;/el-button&gt;</span><br><span class=\"line\">  &lt;/el-form-item&gt;</span><br><span class=\"line\">&lt;/el-form&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        ruleForm: &#123;</span><br><span class=\"line\">          pass: &#x27;&#x27;,</span><br><span class=\"line\">          checkPass: &#x27;&#x27;,</span><br><span class=\"line\">          age: &#x27;&#x27;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">     //重置按钮</span><br><span class=\"line\">      resetForm(formName) &#123;</span><br><span class=\"line\">        this.$refs[formName].resetFields();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-表格-模板代码很关键\"><a href=\"#三-表格-模板代码很关键\" class=\"headerlink\" title=\"三.表格(模板代码很关键)\"></a>三.表格(模板代码很关键)</h1><h2 id=\"表格基础说明\"><a href=\"#表格基础说明\" class=\"headerlink\" title=\"表格基础说明\"></a>表格基础说明</h2><p>①. 表格数据一般是 dataList: [ ],&#x2F;&#x2F;当前页要展示的分页列表数据</p>\n<p>②. v-loading:表格是否加载中</p>\n<p>③. :fit:列的宽度是否自动撑开,默认是true</p>\n<p>④. border：默认值是false(表格带有边框)<br>(默认情况下，Table 组件是不具有竖直方向的边框的，如果需要，可以使用border属性，它接受一个Boolean，设置为true即可启用)</p>\n<p>⑤. height：只要在el-table元素中定义了height属性，即可实现固定表头的表格，而不需要额外的代码。<br>(Table 的高度，默认为自动高度。如果 height为number类型,单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式)</p>\n<p>⑥. max-height:Table 通过设置max-height属性为 Table 指定最大高度。此时若表格所需的高度大于最大高度，则会显示一个滚动条。</p>\n<p>⑦. @selection-change&#x3D;“selectionRowsChange”:当我们选中复选框时,会触发事件,val表示这一行的值</p>\n<p>⑧. @row-click&#x3D;“handleRowChange”:当我们点击这一行时触发事件,row表示这一行的记录</p>\n","categories":[],"tags":[]}